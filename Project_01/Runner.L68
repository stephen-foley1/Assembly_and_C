00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 19/03/2024 09:18:11

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Runner 
00000000                             3  * Written by : Stephen Foley
00000000                             4  * Date       : 19/02/24
00000000                             5  * Description: Runner Project based off the starter kit provided by philip bourke.
00000000                             6  *              I Changed the Colour of the player. I changed the shape and size of the rectangles.
00000000                             7  *              I Slowed the game down. I changed the sounds.I added a second enemy and called it enemny2. 
00000000                             8  *              I Changed the text and moved it's position. I updated the collision
00000000                             9  *              Checker to detect enemy2. Changed the Max velocity. 
00000000                            10  *              I also changed the game so that it ends when a collision is detected.
00000000                            11  *-----------------------------------------------------------
00001000                            12      ORG    $1000
00001000                            13  START:                  ; first instruction of program
00001000                            14  
00001000                            15  *-----------------------------------------------------------
00001000                            16  * Section       : Trap Codes
00001000                            17  * Description   : Trap Codes used throughout StarterKit
00001000                            18  *-----------------------------------------------------------
00001000                            19  * Trap CODES
00001000  =00000021                 20  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 21  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            22                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 23  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 24  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 25  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            26  
00001000  =00000009                 27  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            28  
00001000                            29  *-----------------------------------------------------------
00001000                            30  * Section       : Charater Setup
00001000                            31  * Description   : Size of Player and Enemy and properties
00001000                            32  * of these characters e.g Starting Positions and Sizes
00001000                            33  *-----------------------------------------------------------
00001000  =00000008                 34  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 35  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            36  
00001000  =00000000                 37  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 38  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000  =00000001                 39  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            40  
00001000  =00000001                 41  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 42  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            43  
00001000  =00000000                 44  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 45  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 46  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            47  
00001000  =00000008                 48  ENMY_W_INIT     EQU         08          ; Enemy initial Width
00001000  =00000008                 49  ENMY_H_INIT     EQU         08          ; Enemy initial Height
00001000  =0000000A                 50  ENMY2_W_INIT    EQU         10          ; Enemy initial Height
00001000  =0000000A                 51  ENMY2_H_INIT    EQU         10          ; Enemy initial Height
00001000                            52  
00001000                            53  *-----------------------------------------------------------
00001000                            54  * Section       : Game Stats
00001000                            55  * Description   : Points
00001000                            56  *-----------------------------------------------------------
00001000  =00000001                 57  POINTS                  EQU         01          ; Points added
00001000  =00000001                 58  COLLISION_OCCURRED      EQU         1
00001000                            59  
00001000  =00000072                 60  RESTART_KEY             EQU         'r'
00001000                            61  
00001000                            62  *-----------------------------------------------------------
00001000                            63  * Section       : Keyboard Keys
00001000                            64  * Description   : Spacebar and Escape or two functioning keys
00001000                            65  * Spacebar to JUMP and Escape to Exit Game
00001000                            66  *-----------------------------------------------------------
00001000  =00000020                 67  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 68  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            69  
00001000                            70  *-----------------------------------------------------------
00001000                            71  * Subroutine    : Initialise
00001000                            72  * Description   : Initialise game data into memory such as 
00001000                            73  * sounds and screen size
00001000                            74  *-----------------------------------------------------------
00001000                            75  
00001000                            76  INITIALISE:
00001000                            77      ; Initialise Sounds
00001000  6100 040A                 78      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 0424                 79      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 043E                 80      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            81      
0000100C                            82      
0000100C                            83      ; Screen Size
0000100C  103C 0021                 84      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      85      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      86      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 0000170E             87      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      88      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 0000170C             89      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            90  
00001022                            91      ; Place the Player at the center of the screen
00001022  4281                      92      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024  3239 0000170C             93      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000102A  82FC 0002                 94      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000102E  23C1 00001714             95      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001034                            96  
00001034  4281                      97      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001036  3239 0000170E             98      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000103C  82FC 0002                 99      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001040  23C1 00001718            100      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001046                           101  
00001046                           102      ; Initialise Player Score
00001046  4281                     103      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001048  7200                     104      MOVE.L  #00,        D1          ; Init Score
0000104A  23C1 0000171C            105      MOVE.L  D1,         PLAYER_SCORE
00001050                           106  
00001050                           107      ; Initialise Player Velocity
00001050  4281                     108      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001052  123C 0000                109      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001056  23C1 00001720            110      MOVE.L  D1,         PLYR_VELOCITY
0000105C                           111  
0000105C                           112      ; Initialise Player Gravity
0000105C  4281                     113      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000105E  7201                     114      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001060  23C1 00001724            115      MOVE.L  D1,         PLYR_GRAVITY
00001066                           116  
00001066                           117      ; Initialize Player on Ground
00001066  23FC 00000001 00001728   118      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001070                           119  
00001070                           120      ; Initial Position for Enemy
00001070  4281                     121      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001072  3239 0000170C            122      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001078  23C1 0000172C            123      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000107E                           124  
0000107E  4281                     125      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001080  3239 0000170E            126      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001086  82FC 0002                127      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000108A  23C1 00001730            128      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001090                           129      
00001090                           130      ; Initial Position for Enemy2
00001090  4281                     131      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001092  3239 0000170C            132      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001098  23C1 00001734            133      MOVE.L  D1,         ENEMY_X2     ; Enemy X Position
0000109E                           134  
0000109E  4281                     135      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010A0  3239 0000170E            136      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010A6  82FC 0002                137      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010AA  23C1 00001738            138      MOVE.L  D1,         ENEMY_Y2     ; Enemy Y Position
000010B0                           139  
000010B0                           140    
000010B0                           141  
000010B0                           142  
000010B0                           143  
000010B0                           144      ; Enable the screen back buffer(see easy 68k help)
000010B0  103C 005C                145      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
000010B4  123C 0011                146      MOVE.B  #17,        D1          ; Combine Tasks
000010B8  4E4F                     147      TRAP    #15                     ; Trap (Perform action)
000010BA                           148  
000010BA                           149      ; Clear the screen (see easy 68k help)
000010BA  103C 000B                150      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000010BE  323C FF00                151      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010C2  4E4F                     152      TRAP    #15                     ; Trap (Perform action)
000010C4                           153  
000010C4                           154  
000010C4                           155  
000010C4                           156  *-----------------------------------------------------------
000010C4                           157  * Subroutine    : Delay
000010C4                           158  * Description   : Introduces a delay to slow down the game loop
000010C4                           159  *                Adjust the delay value to control the game speed
000010C4                           160  *-----------------------------------------------------------
000010C4                           161  DELAY:
000010C4  203C 00002710            162      MOVE.L  #10000, D0      ; Load delay value into D0
000010CA                           163  DELAY_LOOP:
000010CA  4E71                     164      NOP                         ; No operation, consumes a small amount of time
000010CC  5340                     165      SUBQ.W  #1, D0              ; Decrement D0
000010CE  66FA                     166      BNE.S   DELAY_LOOP          ; Branch back to DELAY_LOOP if D0 is not zero
000010D0  6000 0006                167      BRA GAMELOOP                ; Branch back to GameLoop
000010D4                           168  *-----------------------------------------------------------
000010D4                           169  * Subroutine    : Game
000010D4                           170  * Description   : Game including main GameLoop. GameLoop is like
000010D4                           171  * a while loop in that it runs forever until interrupted
000010D4                           172  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
000010D4                           173  *-----------------------------------------------------------
000010D4                           174  GAME:
000010D4  6100 0348                175      BSR     PLAY_RUN                ; Play Run Wav
000010D8                           176  GAMELOOP:
000010D8                           177      ; Main Gameloop
000010D8                           178     
000010D8  6100 003C                179      BSR     INPUT                   ; Check Keyboard Input
000010DC  6100 007E                180      BSR     UPDATE                  ; Update positions and points
000010E0  6100 02AC                181      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010E4  6100 045C                182      BSR     CHECK_COLLISIONS        ; Check for Collisions
000010E8  6100 0136                183      BSR     DRAW                    ; Draw the Scene
000010EC  61D6                     184      BSR     DELAY                   ; Introduce a delay
000010EE  61DA                     185      BSR     DELAY_LOOP              ; Introduce the Delayloop
000010F0  6000 00F4                186      BRA     DRAW_BACKGROUND
000010F4                           187      ; Check if a collision occurred
000010F4  0C38 0001 0001           188      CMP.B   #1, COLLISION_OCCURRED  ; Check if collision occurred
000010FA  6700 0538                189      BEQ     END_GAME                ; If collision occurred, end the game
000010FE                           190  
000010FE  0C39 0072 00001116       191      CMP.B   #RESTART_KEY, INPUT     ; Check for restart key
00001106  6700 0004                192      BEQ     RESTART_GAME            ; Restart the game if restart key is pressed
0000110A                           193  
0000110A  60CC                     194      BRA     GAMELOOP                ; Loop back to GameLoop
0000110C                           195  
0000110C                           196  
0000110C                           197  RESTART_GAME:
0000110C  6100 0004                198      BSR     RESTART                 ; Call the restart subroutine
00001110  60C6                     199      BRA     GAMELOOP                ; Continue with the game loop after restart
00001112                           200  
00001112                           201  *-----------------------------------------------------------
00001112                           202  * Subroutine    : Restart Protocol
00001112                           203  * Description   : Restart the game by reinitializing variables
00001112                           204  *-----------------------------------------------------------
00001112                           205  RESTART:
00001112                           206     
00001112  60C4                     207      BRA     GAMELOOP 
00001114  4E75                     208      RTS   ; Return to caller
00001116                           209  
00001116                           210  *-----------------------------------------------------------
00001116                           211  * Subroutine    : Input
00001116                           212  * Description   : Process Keyboard Input
00001116                           213  *-----------------------------------------------------------
00001116                           214  INPUT:
00001116                           215      ; Process Input
00001116  4281                     216      CLR.L   D1                      ; Clear Data Register
00001118  103C 0013                217      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
0000111C  4E4F                     218      TRAP    #15                     ; Trap (Perform action)
0000111E  1401                     219      MOVE.B  D1,         D2          ; Move last key D1 to D2
00001120  B43C 0000                220      CMP.B   #00,        D2          ; Key is pressed
00001124  6700 000E                221      BEQ     PROCESS_INPUT           ; Process Key
00001128  4E4F                     222      TRAP    #15                     ; Trap for Last Key
0000112A                           223      ; Check if key still pressed
0000112A  B23C 00FF                224      CMP.B   #$FF,       D1          ; Is it still pressed
0000112E  6700 0004                225      BEQ     PROCESS_INPUT           ; Process Last Key
00001132  4E75                     226      RTS                             ; Return to subroutine
00001134                           227  
00001134                           228  *-----------------------------------------------------------
00001134                           229  * Subroutine    : Process Input
00001134                           230  * Description   : Branch based on keys pressed
00001134                           231  *-----------------------------------------------------------
00001134                           232  PROCESS_INPUT:
00001134  23C2 00001710            233      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
0000113A  0CB9 0000001B 00001710   234      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
00001144  6700 04F2                235      BEQ     EXIT                    ; Exit if Escape
00001148  0CB9 00000020 00001710   236      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
00001152  6700 028E                237      BEQ     JUMP                    ; Jump
00001156  6000 02AE                238      BRA     IDLE                    ; Or Idle
0000115A  4E75                     239      RTS                             ; Return to subroutine
0000115C                           240  
0000115C                           241  *-----------------------------------------------------------
0000115C                           242  * Subroutine    : Update
0000115C                           243  * Description   : Main update loop update Player and Enemies
0000115C                           244  *-----------------------------------------------------------
0000115C                           245  UPDATE:
0000115C                           246        ; Update the Players Positon based on Velocity and Gravity
0000115C  4281                     247      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000115E  2239 00001720            248      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
00001164  2439 00001724            249      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
0000116A  D282                     250      ADD.L   D2,         D1          ; Add Gravity to Velocity
0000116C  23C1 00001720            251      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
00001172  D2B9 00001718            252      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001178  23C1 00001718            253      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
0000117E                           254  
0000117E                           255      
0000117E                           256                  
0000117E  6100 0008                257      BSR     MOVE_ENEMY              ; Move the Enemy
00001182  6100 001C                258      BSR     MOVE_ENEMY2             ; Move the Enemy2
00001186  4E75                     259      RTS                  
00001188                           260  
00001188                           261  
00001188                           262  *-----------------------------------------------------------
00001188                           263  * Subroutine    : Move Enemy
00001188                           264  * Description   : Move Enemy Right to Left
00001188                           265  *-----------------------------------------------------------
00001188                           266  MOVE_ENEMY:
00001188  55B9 0000172C            267      SUB.L   #2,        ENEMY_X     ; Move enemy by X Value
0000118E  0CB9 00000000 0000172C   268      CMP.L   #0, ENEMY_X             ; Check if enemy moved off-screen
00001198  6E00 0020                269      BGT     NO_RESET_ENEMY          ; If not, skip reset
0000119C  6100 0020                270      BSR     RESET_ENEMY_POSITION    ; Reset enemy position
000011A0                           271      
000011A0                           272      
000011A0                           273  MOVE_ENEMY2:
000011A0  53B9 00001734            274      SUB.L   #01,        ENEMY_X2     ; Move enemy by X Value
000011A6  0CB9 00000000 00001734   275      CMP.L   #0, ENEMY_X2            ; Check if enemy moved off-screen
000011B0  6E00 000A                276      BGT     NO_RESET_ENEMY2         ; If not, skip reset
000011B4  6100 0018                277      BSR     RESET_ENEMY2_POSITION   ; Reset enemy position
000011B8  4E75                     278      RTS
000011BA                           279      
000011BA                           280  NO_RESET_ENEMY:
000011BA  4E75                     281      RTS
000011BC                           282  NO_RESET_ENEMY2:
000011BC  4E75                     283      RTS
000011BE                           284  
000011BE                           285  *-----------------------------------------------------------
000011BE                           286  * Subroutine    : Reset Enemy
000011BE                           287  * Description   : Reset Enemy if to passes 0 to Right of Screen
000011BE                           288  *-----------------------------------------------------------
000011BE                           289  RESET_ENEMY_POSITION:
000011BE  4281                     290      CLR.L   D1
000011C0  3239 0000170C            291      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000011C6  23C1 0000172C            292      MOVE.L  D1,         ENEMY_X     ; Reset enemy X Position
000011CC  4E75                     293      RTS
000011CE                           294  
000011CE                           295      
000011CE                           296  RESET_ENEMY2_POSITION:
000011CE  4281                     297      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011D0  3239 0000170C            298      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000011D6  3439 0000170E            299      MOVE.W  SCREEN_H,    D2
000011DC  23C1 00001734            300      MOVE.L  D1,         ENEMY_X2    ; Reset enemy X Position
000011E2  4E75                     301      RTS
000011E4                           302  END_RESET_ENEMY:
000011E4  4E75                     303      RTS 
000011E6                           304  *-----------------------------------------------------------
000011E6                           305  * Subroutine    : Draw
000011E6                           306  * Description   : Draw Screen
000011E6                           307  *-----------------------------------------------------------
000011E6                           308  DRAW_BACKGROUND:
000011E6  223C 0000FF00            309      MOVE.L  #GREEN, D1          ; Load green color into D1
000011EC  103C 000B                310      MOVE.B  #TC_CURSR_P, D0     ; Set Cursor Position
000011F0  4E4F                     311      TRAP    #15                  ; Trap (Perform action)
000011F2                           312  
000011F2  103C 0050                313      MOVE.B  #80, D0              ; Task for Background Color
000011F6                           314  
000011F6                           315      ; Load screen width and height from memory
000011F6  3439 0000170C            316      MOVE.W  SCREEN_W, D2         ; Load screen width into D2
000011FC  3639 0000170E            317      MOVE.W  SCREEN_H, D3         ; Load screen height into D3
00001202                           318  
00001202  6000 0002                319      BRA     DRAW_ROW             ; Branch to start drawing rows
00001206                           320  
00001206                           321  DRAW_ROW:
00001206  3802                     322      MOVE.W  D2, D4               ; Copy screen width to D4
00001208  3A03                     323      MOVE.W  D3, D5               ; Copy screen height to D5
0000120A  6000 0002                324      BRA     DRAW_PIXEL           ; Branch to start drawing pixels
0000120E                           325  
0000120E                           326  DRAW_PIXEL:
0000120E  4E4F                     327      TRAP    #15                  ; Draw pixel with current color
00001210  51CC FFFC                328      DBRA    D4, DRAW_PIXEL       ; Decrement D4 and loop if not zero
00001214                           329  
00001214  103C 000B                330      MOVE.B  #TC_CURSR_P, D0     ; Move to next row (assuming TC_CURSR_P serves this purpose)
00001218  4E4F                     331      TRAP    #15                  ; Trap (Perform action)
0000121A                           332  
0000121A  51CD FFEA                333      DBRA    D5, DRAW_ROW         ; Decrement D5 and loop if not zero
0000121E                           334  
0000121E  4E75                     335      RTS                          ; Return from subroutine
00001220                           336  DRAW: 
00001220                           337      ; Enable back buffer
00001220  103C 005E                338      MOVE.B  #94,        D0
00001224  4E4F                     339      TRAP    #15
00001226                           340  
00001226                           341      ; Clear the screen
00001226  103C 000B                342      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000122A  323C FF00                343      MOVE.W  #$FF00,     D1          ; Clear contents
0000122E  4E4F                     344      TRAP    #15                     ; Trap (Perform action)
00001230                           345  
00001230  6100 0010                346      BSR     DRAW_PLYR_DATA          ; Draw Score, HUD, Player X and Y
00001234  6100 0230                347      BSR     DRAW_PLAYER             ; Draw Player
00001238  6100 025C                348      BSR     DRAW_ENEMY              ; Draw Enemy
0000123C  6100 0288                349      BSR     DRAW_ENEMY2              ; Draw Enemy
00001240  4E75                     350      RTS                             ; Return to subroutine
00001242                           351     
00001242                           352  
00001242                           353  *-----------------------------------------------------------
00001242                           354  * Subroutine    : Draw Player Data
00001242                           355  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
00001242                           356  *-----------------------------------------------------------
00001242                           357  DRAW_PLYR_DATA:
00001242  4281                     358      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001244                           359    
00001244                           360       ;Player Score Message
00001244  103C 000B                361      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001248  323C 0101                362      MOVE.W  #$0101,     D1          ; Col 02, Row 01
0000124C  4E4F                     363      TRAP    #15                     ; Trap (Perform action)
0000124E  43F9 00001658            364      LEA     SCORE_MSG,  A1          ; Score Message
00001254  303C 000D                365      MOVE    #13,        D0          ; No Line feed
00001258  4E4F                     366      TRAP    #15                     ; Trap (Perform action)
0000125A                           367  
0000125A                           368      ; Player Score Value
0000125A  103C 000B                369      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000125E  323C 0801                370      MOVE.W  #$0801,     D1          ; Col 09, Row 01
00001262  4E4F                     371      TRAP    #15                     ; Trap (Perform action)
00001264  103C 0003                372      MOVE.B  #03,        D0          ; Display number at D1.L
00001268  2239 0000171C            373      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
0000126E  4E4F                     374      TRAP    #15                     ; Trap (Perform action)
00001270                           375      
00001270                           376      ; Player X Message
00001270  103C 000B                377      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001274  323C 0203                378      MOVE.W  #$0203,     D1          ; Col 02, Row 02
00001278  4E4F                     379      TRAP    #15                     ; Trap (Perform action)
0000127A  43F9 000016D2            380      LEA     X_MSG,      A1          ; X Message
00001280  303C 000D                381      MOVE    #13,        D0          ; No Line feed
00001284  4E4F                     382      TRAP    #15                     ; Trap (Perform action)
00001286                           383      
00001286                           384      ; Player X
00001286  103C 000B                385      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
0000128A  323C 0503                386      MOVE.W  #$0503,     D1          ; Col 05, Row 02
0000128E  4E4F                     387      TRAP    #15                     ; Trap (Perform action)
00001290  103C 0003                388      MOVE.B  #03,        D0          ; Display number at D1.L
00001294  2239 00001714            389      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
0000129A  4E4F                     390      TRAP    #15                     ; Trap (Perform action)
0000129C                           391      
0000129C                           392      ; Player Y Message
0000129C  103C 000B                393      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012A0  323C 0204                394      MOVE.W  #$0204,     D1          ; Col 10, Row 02
000012A4  4E4F                     395      TRAP    #15                     ; Trap (Perform action)
000012A6  43F9 000016D5            396      LEA     Y_MSG,      A1          ; Y Message
000012AC  303C 000D                397      MOVE    #13,        D0          ; No Line feed
000012B0  4E4F                     398      TRAP    #15                     ; Trap (Perform action)
000012B2                           399      
000012B2                           400      ; Player Y
000012B2  103C 000B                401      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012B6  323C 0504                402      MOVE.W  #$0504,     D1          ; Col 12, Row 02
000012BA  4E4F                     403      TRAP    #15                     ; Trap (Perform action)
000012BC  103C 0003                404      MOVE.B  #03,        D0          ; Display number at D1.L
000012C0  2239 00001718            405      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
000012C6  4E4F                     406      TRAP    #15                     ; Trap (Perform action) 
000012C8                           407  
000012C8                           408      ; Player Velocity Message
000012C8  103C 000B                409      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012CC  323C 0206                410      MOVE.W  #$0206,     D1          ; Col 02, Row 03
000012D0  4E4F                     411      TRAP    #15                     ; Trap (Perform action)
000012D2  43F9 000016D8            412      LEA     V_MSG,      A1          ; Velocity Message
000012D8  303C 000D                413      MOVE    #13,        D0          ; No Line feed
000012DC  4E4F                     414      TRAP    #15                     ; Trap (Perform action)
000012DE                           415      
000012DE                           416      ; Player Velocity
000012DE  103C 000B                417      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012E2  323C 0906                418      MOVE.W  #$0906,     D1          ; Col 05, Row 03
000012E6  4E4F                     419      TRAP    #15                     ; Trap (Perform action)
000012E8  103C 0003                420      MOVE.B  #03,        D0          ; Display number at D1.L
000012EC  2239 00001720            421      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
000012F2  4E4F                     422      TRAP    #15                     ; Trap (Perform action)
000012F4                           423      
000012F4                           424      ; Player Gravity Message
000012F4  103C 000B                425      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012F8  323C 0207                426      MOVE.W  #$0207,     D1          ; Col 10, Row 03
000012FC  4E4F                     427      TRAP    #15                     ; Trap (Perform action)
000012FE  43F9 000016DF            428      LEA     G_MSG,      A1          ; G Message
00001304  303C 000D                429      MOVE    #13,        D0          ; No Line feed
00001308  4E4F                     430      TRAP    #15                     ; Trap (Perform action)
0000130A                           431      
0000130A                           432      ; Player Gravity
0000130A  103C 000B                433      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000130E  323C 0B07                434      MOVE.W  #$0B07,     D1          ; Col 12, Row 03
00001312  4E4F                     435      TRAP    #15                     ; Trap (Perform action)
00001314  103C 0003                436      MOVE.B  #03,        D0          ; Display number at D1.L
00001318  2239 00001724            437      MOVE.L  PLYR_GRAVITY,D1         ; Move Gravity to D1.L
0000131E  4E4F                     438      TRAP    #15                     ; Trap (Perform action)
00001320                           439  
00001320                           440      ; Show welcome msg 
00001320  103C 000B                441      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001324  323C 1801                442      MOVE.W  #$1801,     D1          ; Col 20, Row 1
00001328  4E4F                     443      TRAP    #15                     ; Trap (Perform action)
0000132A  43F9 00001661            444      LEA     WELCOME_MSG, A1         ; Keycode
00001330  303C 000D                445      MOVE    #13,        D0          ; No Line feed
00001334  4E4F                     446      TRAP    #15                     ; Trap (Perform action)
00001336                           447      
00001336                           448      
00001336                           449      ; Show welcome msg 2
00001336  103C 000B                450      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000133A  323C 1803                451      MOVE.W  #$1803,     D1          ; Col 10, Row 03
0000133E  4E4F                     452      TRAP    #15                     ; Trap (Perform action)
00001340  43F9 00001677            453      LEA     WELCOME_MSG2,    A1          ; On Ground Message
00001346  303C 000D                454      MOVE    #13,        D0          ; No Line feed
0000134A  4E4F                     455      TRAP    #15                     ; Trap (Perform action)
0000134C                           456      
0000134C                           457    
0000134C                           458    
0000134C                           459  
0000134C                           460     ; Show welcome msg 2
0000134C  103C 000B                461      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001350  323C 1802                462      MOVE.W  #$1802,     D1          ; Col 10, Row 03
00001354  4E4F                     463      TRAP    #15                     ; Trap (Perform action)
00001356  43F9 0000168C            464      LEA     WELCOME_MSG3,    A1          ; On Ground Message
0000135C  303C 000D                465      MOVE    #13,        D0          ; No Line feed
00001360  4E4F                     466      TRAP    #15                     ; Trap (Perform action)
00001362                           467      
00001362                           468  
00001362                           469      ; Show welcome msg 4
00001362  103C 000B                470      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001366  323C 1804                471      MOVE.W  #$1804,     D1          ; Col 02, Row 06
0000136A  4E4F                     472      TRAP    #15                     ; Trap (Perform action)
0000136C  43F9 000016AD            473      LEA     WELCOME_MSG4,   A1          ; Draw
00001372  303C 000D                474      MOVE    #13,        D0          ; No Line feed
00001376  4E4F                     475      TRAP    #15                     ; Trap (Perform action)
00001378                           476  
00001378                           477      ; Show how to quit game
00001378  103C 000B                478      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000137C  323C 0219                479      MOVE.W  #$0219,     D1          ; Col 02, Row 07
00001380  4E4F                     480      TRAP    #15                     ; Trap (Perform action)
00001382  43F9 000016E8            481      LEA     QUIT_MSG,   A1          ; Move Idle Message to A1
00001388  303C 000D                482      MOVE    #13,        D0          ; No Line feed
0000138C  4E4F                     483      TRAP    #15                     ; Trap (Perform action)
0000138E                           484  
0000138E                           485   
0000138E                           486  
0000138E                           487  *-----------------------------------------------------------
0000138E                           488  * Subroutine    : Player is on Ground
0000138E                           489  * Description   : Check if the Player is on or off Ground
0000138E                           490  *-----------------------------------------------------------
0000138E                           491  IS_PLAYER_ON_GND:
0000138E                           492      ; Check if Player is on Ground
0000138E  4281                     493      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001390  4282                     494      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00001392  3239 0000170E            495      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001398  82FC 0002                496      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000139C  2439 00001718            497      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
000013A2  B441                     498      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
000013A4  6C00 0008                499      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
000013A8  6D00 002C                500      BLT     SET_OFF_GROUND          ; The Player is off the Ground
000013AC  4E75                     501      RTS                             ; Return to subroutine
000013AE                           502  
000013AE                           503  
000013AE                           504  *-----------------------------------------------------------
000013AE                           505  * Subroutine    : On Ground
000013AE                           506  * Description   : Set the Player On Ground
000013AE                           507  *-----------------------------------------------------------
000013AE                           508  SET_ON_GROUND:
000013AE  4281                     509      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013B0  3239 0000170E            510      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000013B6  82FC 0002                511      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000013BA  23C1 00001718            512      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
000013C0  4281                     513      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013C2  7200                     514      MOVE.L  #00,        D1          ; Player Velocity
000013C4  23C1 00001720            515      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
000013CA  23FC 00000001 00001728   516      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
000013D4  4E75                     517      RTS
000013D6                           518  
000013D6                           519  *-----------------------------------------------------------
000013D6                           520  * Subroutine    : Off Ground
000013D6                           521  * Description   : Set the Player Off Ground
000013D6                           522  *-----------------------------------------------------------
000013D6                           523  SET_OFF_GROUND:
000013D6  23FC 00000000 00001728   524      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
000013E0  4E75                     525      RTS                             ; Return to subroutine
000013E2                           526  *-----------------------------------------------------------
000013E2                           527  * Subroutine    : Jump
000013E2                           528  * Description   : Perform a Jump
000013E2                           529  *-----------------------------------------------------------
000013E2                           530  JUMP:
000013E2  0CB9 00000001 00001728   531      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000013EC  6700 0006                532      BEQ     PERFORM_JUMP            ; Do Jump
000013F0  6000 0012                533      BRA     JUMP_DONE               ;
000013F4                           534  PERFORM_JUMP:
000013F4  6100 0046                535      BSR     PLAY_JUMP               ; Play jump sound
000013F8  23FC FFFFFFEC 00001720   536      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
00001402  4E75                     537      RTS                             ; Return to subroutine
00001404                           538  JUMP_DONE:
00001404  4E75                     539      RTS                             ; Return to subroutine
00001406                           540  
00001406                           541  *-----------------------------------------------------------
00001406                           542  * Subroutine    : Idle
00001406                           543  * Description   : Perform a Idle
00001406                           544  *----------------------------------------------------------- 
00001406                           545  IDLE:
00001406  6100 0016                546      BSR     PLAY_RUN                ; Play Run Wav
0000140A  4E75                     547      RTS                             ; Return to subroutine
0000140C                           548  
0000140C                           549  *-----------------------------------------------------------
0000140C                           550  * Subroutines   : Sound Load and Play
0000140C                           551  * Description   : Initialise game sounds into memory 
0000140C                           552  * Current Sounds are RUN, JUMP and Opps for Collision
0000140C                           553  *-----------------------------------------------------------
0000140C                           554  RUN_LOAD:
0000140C  43F9 00001745            555      LEA     RUN_WAV,    A1          ; Load Wav File into A1
00001412  323C 0000                556      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
00001416  303C 0047                557      MOVE    #71,        D0          ; Load into memory
0000141A  4E4F                     558      TRAP    #15                     ; Trap (Perform action)
0000141C  4E75                     559      RTS                             ; Return to subroutine
0000141E                           560  
0000141E                           561  PLAY_RUN:
0000141E  323C 0000                562      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
00001422  303C 0048                563      MOVE    #72,        D0          ; Play Sound
00001426  4E4F                     564      TRAP    #15                     ; Trap (Perform action)
00001428  4E75                     565      RTS                             ; Return to subroutine
0000142A                           566  
0000142A                           567  JUMP_LOAD:
0000142A  43F9 0000173C            568      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
00001430  323C 0001                569      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
00001434  303C 0047                570      MOVE    #71,        D0          ; Load into memory
00001438  4E4F                     571      TRAP    #15                     ; Trap (Perform action)
0000143A  4E75                     572      RTS                             ; Return to subroutine
0000143C                           573  
0000143C                           574  PLAY_JUMP:
0000143C  323C 0001                575      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
00001440  303C 0048                576      MOVE    #72,        D0          ; Play Sound
00001444  4E4F                     577      TRAP    #15                     ; Trap (Perform action)
00001446  4E75                     578      RTS                             ; Return to subroutine
00001448                           579  
00001448                           580  OPPS_LOAD:
00001448  43F9 00001754            581      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
0000144E  323C 0002                582      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
00001452  303C 0047                583      MOVE    #71,        D0          ; Load into memory
00001456  4E4F                     584      TRAP    #15                     ; Trap (Perform action)
00001458  4E75                     585      RTS                             ; Return to subroutine
0000145A                           586  
0000145A                           587  PLAY_OPPS:
0000145A  323C 0002                588      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
0000145E  303C 0048                589      MOVE    #72,        D0          ; Play Sound
00001462  4E4F                     590      TRAP    #15                     ; Trap (Perform action)
00001464  4E75                     591      RTS                             ; Return to subroutine
00001466                           592  
00001466                           593  *-----------------------------------------------------------
00001466                           594  * Subroutine    : Draw Player
00001466                           595  * Description   : Draw Player Square
00001466                           596  *-----------------------------------------------------------
00001466                           597  DRAW_PLAYER:
00001466                           598      ; Set Pixel Colors
00001466  223C 00FFA500            599      MOVE.L  #BLUE,     D1          ; Set Background color
0000146C  103C 0050                600      MOVE.B  #80,        D0          ; Task for Background Color
00001470  4E4F                     601      TRAP    #15                     ; Trap (Perform action)
00001472                           602  
00001472                           603      ; Set X, Y, Width and Height
00001472  2239 00001714            604      MOVE.L  PLAYER_X,   D1          ; X
00001478  2439 00001718            605      MOVE.L  PLAYER_Y,   D2          ; Y
0000147E  2639 00001714            606      MOVE.L  PLAYER_X,   D3
00001484  5083                     607      ADD.L   #PLYR_W_INIT,   D3      ; Width
00001486  2839 00001718            608      MOVE.L  PLAYER_Y,   D4 
0000148C  5084                     609      ADD.L   #PLYR_H_INIT,   D4      ; Height
0000148E                           610      
0000148E                           611      ; Draw Player
0000148E  103C 0057                612      MOVE.B  #87,        D0          ; Draw Player
00001492  4E4F                     613      TRAP    #15                     ; Trap (Perform action)
00001494  4E75                     614      RTS                             ; Return to subroutine
00001496                           615  
00001496                           616  *-----------------------------------------------------------
00001496                           617  * Subroutine    : Draw Enemy
00001496                           618  * Description   : Draw Enemy Square
00001496                           619  *-----------------------------------------------------------
00001496                           620  DRAW_ENEMY:
00001496                           621      ; Set Pixel Colors
00001496  223C 000000FF            622      MOVE.L  #RED,       D1          ; Set Background color
0000149C  103C 0050                623      MOVE.B  #80,        D0          ; Task for Background Color
000014A0  4E4F                     624      TRAP    #15                     ; Trap (Perform action)
000014A2                           625  
000014A2                           626      ; Set X, Y, Width and Height
000014A2  2239 0000172C            627      MOVE.L  ENEMY_X,    D1          ; X
000014A8  2439 00001730            628      MOVE.L  ENEMY_Y,    D2          ; Y
000014AE  2639 0000172C            629      MOVE.L  ENEMY_X,    D3
000014B4  5083                     630      ADD.L   #ENMY_W_INIT,   D3      ; Width
000014B6  2839 00001730            631      MOVE.L  ENEMY_Y,    D4 
000014BC  5084                     632      ADD.L   #ENMY_H_INIT,   D4      ; Height
000014BE                           633      
000014BE                           634      ; Draw Enemy    
000014BE  103C 0057                635      MOVE.B  #87,        D0          ; Draw Enemy
000014C2  4E4F                     636      TRAP    #15                     ; Trap (Perform action)
000014C4  4E75                     637      RTS
000014C6                           638  DRAW_ENEMY2:
000014C6                           639      ; Set Pixel Colors
000014C6  223C 00FFFFFF            640      MOVE.L  #WHITE,      D1          ; Set Background color (Draw blue enemy first)
000014CC  103C 0050                641      MOVE.B  #80,        D0          ; Task for Background Color
000014D0  4E4F                     642      TRAP    #15                     ; Trap (Perform action)
000014D2                           643  
000014D2                           644      ; Set X, Y, Width and Height for WHITE enemy
000014D2  2239 00001734            645      MOVE.L  ENEMY_X2,    D1          ; X
000014D8  2439 00001738            646      MOVE.L  ENEMY_Y2,    D2          ; Y
000014DE                           647    
000014DE  2639 00001734            648      MOVE.L  ENEMY_X2,    D3
000014E4  0683 00000028            649      ADD.L   #ENMY2_W_INIT*4, D3        ; Width
000014EA  0681 0000001E            650      ADD.L   #30,D1
000014F0  0482 0000000A            651      SUB.L   #10,D2
000014F6  2839 00001738            652      MOVE.L  ENEMY_Y2,    D4 
000014FC  5684                     653      ADD.L   #ENMY2_H_INIT/3, D4        ; Heigh 
000014FE                           654  
000014FE                           655      ; Draw WHITE enemy    
000014FE  103C 0057                656      MOVE.B  #87,        D0          ; Draw Enemy
00001502  4E4F                     657      TRAP    #15                     ; Trap (Perform action)
00001504                           658  
00001504                           659      ; Set Pixel Colors for GREEN enemy
00001504  223C 0000FF00            660      MOVE.L  #GREEN,       D1          ; Set Background color (Draw red enemy on top)
0000150A  103C 0050                661      MOVE.B  #80,        D0          ; Task for Background Color
0000150E  4E4F                     662      TRAP    #15                     ; Trap (Perform action)
00001510                           663  
00001510                           664      ; Set X, Y, Width and Height for GREEN enemy
00001510  2239 00001734            665      MOVE.L  ENEMY_X2,    D1          ; X
00001516  2439 00001738            666      MOVE.L  ENEMY_Y2,    D2          ; Y
0000151C  2639 00001734            667      MOVE.L  ENEMY_X2,    D3
00001522  0683 00000028            668      ADD.L   #ENMY2_W_INIT*4, D3        ; Width
00001528  0681 0000001E            669      ADD.L   #30,D1 
0000152E                           670   
0000152E  2839 00001738            671      MOVE.L  ENEMY_Y2,    D4          ; Adjust Y coordinate for GREEN enemy
00001534                           672   
00001534  0684 0000000A            673      ADD.L   #ENMY2_H_INIT, D4        ; Height
0000153A                           674  
0000153A                           675      ; Draw GREEN enemy    
0000153A  103C 0057                676      MOVE.B  #87,        D0          ; Draw Enemy
0000153E  4E4F                     677      TRAP    #15                     ; Trap (Perform action)
00001540  4E75                     678      RTS                         
00001542                           679                              
00001542                           680    *-----------------------------------------------------------
00001542                           681  * Subroutine    : Collision Check
00001542                           682  * Description   : Axis-Aligned Bounding Box Collision Detection
00001542                           683  * Algorithm checks for overlap on the 4 sides of the Player and 
00001542                           684  * Enemy rectangles
00001542                           685  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001542                           686  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001542                           687  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001542                           688  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001542                           689  *-----------------------------------------------------------
00001542                           690  CHECK_COLLISIONS:
00001542  4281                     691      CLR.L   D1                      ; Clear D1
00001544  4282                     692      CLR.L   D2                      ; Clear D2
00001546                           693  
00001546                           694      ; Check collision for ENEMY1
00001546  2239 00001714            695      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000154C  2439 0000172C            696      MOVE.L  ENEMY_X,    D2          ; Move ENEMY1 X to D2
00001552  D4B8 0008                697      ADD.L   ENMY_W_INIT,D2          ; Set ENEMY1 width (X + Width)
00001556  B481                     698      CMP.L   D1,         D2          ; Do they overlap ?
00001558  6F00 0006                699      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
0000155C  6000 0044                700      BRA     CHECK_ENEMY2_COLLISION  ; If not, check collision for ENEMY2
00001560                           701  
00001560                           702  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:
00001560  D2B8 0008                703      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001564  2439 0000172C            704      MOVE.L  ENEMY_X,    D2          ; Move ENEMY1 X to D2
0000156A  B481                     705      CMP.L   D1,         D2          ; Do they overlap ?
0000156C  6C00 0006                706      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal ?
00001570  6000 0030                707      BRA     CHECK_ENEMY2_COLLISION  ; If not, check collision for ENEMY2
00001574                           708  
00001574                           709  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
00001574  2239 00001718            710      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000157A  2439 00001730            711      MOVE.L  ENEMY_Y,    D2          ; Move ENEMY1 Y to D2
00001580  D4B8 0008                712      ADD.L   ENMY_H_INIT,D2          ; Set ENEMY1 Height to D2
00001584  B481                     713      CMP.L   D1,         D2          ; Do they overlap ?
00001586  6F00 0006                714      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal ?
0000158A  6000 0016                715      BRA     CHECK_ENEMY2_COLLISION  ; If not, check collision for ENEMY2
0000158E                           716  
0000158E                           717  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     
0000158E  D2B8 0008                718      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001592  2439 00001730            719      MOVE.L  ENEMY_Y,    D2          ; Move ENEMY1 Height to D2  
00001598  B481                     720      CMP.L   D1,         D2          ; Do they overlap ?
0000159A  6C00 0062                721      BGE     COLLISION_ENEMY1         ; Collision with ENEMY1!
0000159E  6000 0002                722      BRA     CHECK_ENEMY2_COLLISION  ; If not, check collision for ENEMY2
000015A2                           723  
000015A2                           724  CHECK_ENEMY2_COLLISION:
000015A2                           725      ; Check collision for ENEMY2
000015A2  2239 00001714            726      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000015A8  2439 00001734            727      MOVE.L  ENEMY_X2,   D2          ; Move ENEMY2 X to D2
000015AE  D4B8 000A                728      ADD.L   ENMY2_W_INIT,D2         ; Set ENEMY2 width (X + Width)
000015B2  B481                     729      CMP.L   D1,         D2          ; Do they overlap ?
000015B4  6F00 0006                730      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY2_X  ; Less than or Equal ?
000015B8  6000 0068                731      BRA     COLLISION_CHECK_DONE    ; If not, no collision for ENEMY2
000015BC                           732  
000015BC                           733  PLAYER_X_PLUS_W_LTE_TO_ENEMY2_X:
000015BC  D2B8 0008                734      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000015C0  2439 00001734            735      MOVE.L  ENEMY_X2,   D2          ; Move ENEMY2 X to D2
000015C6  B481                     736      CMP.L   D1,         D2          ; Do they overlap ?
000015C8  6C00 0006                737      BGE     PLAYER_Y_LTE_TO_ENEMY2_Y_PLUS_H  ; Less than or Equal ?
000015CC  6000 0054                738      BRA     COLLISION_CHECK_DONE    ; If not, no collision for ENEMY2
000015D0                           739  
000015D0                           740  PLAYER_Y_LTE_TO_ENEMY2_Y_PLUS_H:     
000015D0  2239 00001718            741      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000015D6  2439 00001738            742      MOVE.L  ENEMY_Y2,   D2          ; Move ENEMY2 Y to D2
000015DC  D4B8 000A                743      ADD.L   ENMY2_H_INIT,D2         ; Set ENEMY2 Height to D2
000015E0  B481                     744      CMP.L   D1,         D2          ; Do they overlap ?
000015E2  6F00 0006                745      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY2_Y  ; Less than or Equal ?
000015E6  6000 003A                746      BRA     COLLISION_CHECK_DONE    ; If not, no collision for ENEMY2
000015EA                           747  
000015EA                           748  PLAYER_Y_PLUS_H_LTE_TO_ENEMY2_Y:     
000015EA  D2B8 0008                749      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000015EE  2439 00001738            750      MOVE.L  ENEMY_Y2,   D2          ; Move ENEMY2 Height to D2  
000015F4  B481                     751      CMP.L   D1,         D2          ; Do they overlap ?
000015F6  6C00 0018                752      BGE     COLLISION_ENEMY2         ; Collision with ENEMY2!
000015FA  6000 0026                753      BRA     COLLISION_CHECK_DONE    ; If not, no collision for ENEMY2
000015FE                           754  
000015FE                           755  COLLISION_ENEMY1:
000015FE                           756      ; Collision with ENEMY1 detected
000015FE  6100 FE5A                757      BSR     PLAY_OPPS               ; Play Opps Wav
00001602  23FC 00000000 0000171C   758      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
0000160C  6000 0026                759      BRA     END_GAME                ; End the game
00001610                           760  
00001610                           761  COLLISION_ENEMY2:
00001610                           762      ; Collision with ENEMY2 detected
00001610  6100 FE48                763      BSR     PLAY_OPPS               ; Play Opps Wav
00001614  23FC 00000000 0000171C   764      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
0000161E  6000 0014                765      BRA     END_GAME                ; End the game
00001622                           766  
00001622                           767  COLLISION_CHECK_DONE:
00001622                           768      ; No Collision Update points
00001622  5281                     769      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001624  D2B9 0000171C            770      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000162A  23C1 0000171C            771      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001630  4E75                     772      RTS                             ; End the game
00001632                           773  
00001632                           774  NO_COLLISION:
00001632  4E75                     775      RTS                             ; No collision, return
00001634                           776  
00001634                           777  END_GAME:
00001634  6000 0002                778      BRA     EXIT                    ; End the game
00001638                           779  
00001638                           780  
00001638                           781  
00001638                           782                       ; Return to subroutine
00001638                           783    
00001638                           784  *-----------------------------------------------------------
00001638                           785  * Subroutine    : EXIT
00001638                           786  * Description   : Exit message and End Game
00001638                           787  *-----------------------------------------------------------
00001638                           788  EXIT:
00001638                           789      ; Show if Exiting is Running
00001638                           790  
00001638                           791      ; Show if Exiting is Running
00001638  103C 000B                792      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000163C  323C 4004                793      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001640  4E4F                     794      TRAP    #15                     ; Trap (Perform action)
00001642  43F9 00001700            795      LEA     EXIT_MSG,   A1          ; Exit
00001648  303C 000D                796      MOVE    #13,        D0          ; No Line feed
0000164C  4E4F                     797      TRAP    #15                     ; Trap (Perform action)
0000164E                           798  
0000164E  103C 0009                799      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001652  4E4F                     800      TRAP    #15                     ; Exit program
00001654                           801                     ; Trap (Perform action)
00001654  FFFF FFFF                802      SIMHALT
00001658                           803  
00001658                           804  
00001658                           805  *-----------------------------------------------------------
00001658                           806  * Section       : Messages
00001658                           807  * Description   : Messages to Print on Console, names should be
00001658                           808  * self documenting
00001658                           809  *-----------------------------------------------------------
00001658= 53 63 6F 72 65 20 ...    810  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00001661= 53 74 65 70 68 65 ...    811  WELCOME_MSG:    DC.B    'Stephen Foleys Runner', 0    ; New game title message (with newline)
00001677= 48 6F 77 20 66 61 ...    812  WELCOME_MSG2:   DC.B    'How far can you get?', 0    ; How far can you get? message (with newline)
0000168C= 54 68 65 20 63 75 ...    813  WELCOME_MSG3:   DC.B    'The current high score is 999999', 0    ; High score message (with newline)
000016AD= 20 20 20 20 20 20 ...    814  WELCOME_MSG4:   DC.B    '       GOOD LUCK !         '    , 0    ; Good luck message (with additional leading spaces)
000016C9                           815  
000016C9                           816  
000016C9                           817  
000016C9= 4A 75 6D 70 2E 2E ...    818  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
000016D2                           819  
000016D2= 58 3A 00                 820  X_MSG           DC.B    'X:', 0             ; X Position Message
000016D5= 59 3A 00                 821  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
000016D8= 53 70 65 65 64 3A 00     822  V_MSG           DC.B    'Speed:', 0             ; Velocity Position Message
000016DF= 47 72 61 76 69 74 ...    823  G_MSG           DC.B    'Gravity:', 0             ; Gravity Position Message
000016E8= 54 6F 20 51 75 69 ...    824  QUIT_MSG        DC.B    'To Quit press "ESC" Key', 0
00001700= 45 78 69 74 69 6E ...    825  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
0000170C                           826  
0000170C                           827  *-----------------------------------------------------------
0000170C                           828  * Section       : Graphic Colors
0000170C                           829  * Description   : Screen Pixel Color
0000170C                           830  *-----------------------------------------------------------
0000170C  =000000FF                831  RED           EQU     $0000FF   ; Red color            
0000170C  =00FFA500                832  BLUE          EQU     $FFA500   ; Bright blue color
0000170C  =0000FF00                833  GREEN         EQU     $00FF00  ; Define green color
0000170C  =00FFFFFF                834  WHITE         EQU     $FFFFFF  ; Define white color
0000170C                           835  
0000170C                           836  
0000170C                           837  *-----------------------------------------------------------
0000170C                           838  * Section       : Screen Size
0000170C                           839  * Description   : Screen Width and Height
0000170C                           840  *-----------------------------------------------------------
0000170C                           841  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
0000170E                           842  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001710                           843  
00001710                           844  *-----------------------------------------------------------
00001710                           845  * Section       : Keyboard Input
00001710                           846  * Description   : Used for storing Keypresses
00001710                           847  *-----------------------------------------------------------
00001710                           848  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001714                           849  
00001714                           850  *-----------------------------------------------------------
00001714                           851  * Section       : Character Positions
00001714                           852  * Description   : Player and Enemy Position Memory Locations
00001714                           853  *-----------------------------------------------------------
00001714                           854  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00001718                           855  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
0000171C                           856  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00001720                           857  
00001720                           858  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00001724                           859  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00001728                           860  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
0000172C                           861  
0000172C                           862  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
00001730                           863  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Positionar
00001734                           864  ENEMY_X2        DS.L    01  ; Reserve Space for Enemy 2 X Position
00001738                           865  ENEMY_Y2        DS.L    01  ; Reserve Space for Enemy 2 Y Position
0000173C                           866  *-----------------------------------------------------------
0000173C                           867  * Section       : Sounds
0000173C                           868  * Description   : Sound files, which are then loaded and given
0000173C                           869  * an address in memory, they take a longtime to process and play
0000173C                           870  * so keep the files small. Used https://voicemaker.in/ to 
0000173C                           871  * generate and Audacity to convert MP3 to WAV
0000173C                           872  *-----------------------------------------------------------
0000173C= 6A 75 6D 70 2E 77 ...    873  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
00001745= 6C 61 73 65 72 73 ...    874  RUN_WAV         DC.B    'lasershoot.wav',0         ; Run Sound
00001754= 68 69 74 48 75 72 ...    875  OPPS_WAV        DC.B    'hitHurt.wav',0        ; Collision Opps
00001760                           876  
00001760                           877      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BLUE                FFA500
CHECK_COLLISIONS    1542
CHECK_ENEMY2_COLLISION  15A2
COLLISION_CHECK_DONE  1622
COLLISION_ENEMY1    15FE
COLLISION_ENEMY2    1610
COLLISION_OCCURRED  1
CURRENT_KEY         1710
DELAY               10C4
DELAY_LOOP          10CA
DRAW                1220
DRAW_BACKGROUND     11E6
DRAW_ENEMY          1496
DRAW_ENEMY2         14C6
DRAW_PIXEL          120E
DRAW_PLAYER         1466
DRAW_PLYR_DATA      1242
DRAW_ROW            1206
END_GAME            1634
END_RESET_ENEMY     11E4
ENEMY_X             172C
ENEMY_X2            1734
ENEMY_Y             1730
ENEMY_Y2            1738
ENMY2_H_INIT        A
ENMY2_W_INIT        A
ENMY_H_INIT         8
ENMY_W_INIT         8
ESCAPE              1B
EXIT                1638
EXIT_MSG            1700
GAME                10D4
GAMELOOP            10D8
GND_FALSE           0
GND_TRUE            1
GREEN               FF00
G_MSG               16DF
IDLE                1406
INITIALISE          1000
INPUT               1116
IS_PLAYER_ON_GND    138E
JMP_INDEX           1
JUMP                13E2
JUMP_DONE           1404
JUMP_LOAD           142A
JUMP_MSG            16C9
JUMP_WAV            173C
MOVE_ENEMY          1188
MOVE_ENEMY2         11A0
NO_COLLISION        1632
NO_RESET_ENEMY      11BA
NO_RESET_ENEMY2     11BC
OPPS_INDEX          2
OPPS_LOAD           1448
OPPS_WAV            1754
PERFORM_JUMP        13F4
PLAYER_SCORE        171C
PLAYER_X            1714
PLAYER_X_PLUS_W_LTE_TO_ENEMY2_X  15BC
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1560
PLAYER_Y            1718
PLAYER_Y_LTE_TO_ENEMY2_Y_PLUS_H  15D0
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  1574
PLAYER_Y_PLUS_H_LTE_TO_ENEMY2_Y  15EA
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  158E
PLAY_JUMP           143C
PLAY_OPPS           145A
PLAY_RUN            141E
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        1724
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         1728
PLYR_VELOCITY       1720
PLYR_W_INIT         8
POINTS              1
PROCESS_INPUT       1134
QUIT_MSG            16E8
RED                 FF
RESET_ENEMY2_POSITION  11CE
RESET_ENEMY_POSITION  11BE
RESTART             1112
RESTART_GAME        110C
RESTART_KEY         72
RUN_INDEX           0
RUN_LOAD            140C
RUN_WAV             1745
SCORE_MSG           1658
SCREEN_H            170E
SCREEN_W            170C
SET_OFF_GROUND      13D6
SET_ON_GROUND       13AE
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              115C
V_MSG               16D8
WELCOME_MSG         1661
WELCOME_MSG2        1677
WELCOME_MSG3        168C
WELCOME_MSG4        16AD
WHITE               FFFFFF
X_MSG               16D2
Y_MSG               16D5
