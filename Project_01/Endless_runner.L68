00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 05/03/2024 09:14:18

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner 
00000000                             3  * Written by : Stephen Foley
00000000                             4  * Date       : 19/02/24
00000000                             5  * Description: Endless Runner Project based off the starter kit provided by philip bourke.
00000000                             6  *              I Changed the Colour of the player. I changed the shape and size of the rectangles.
00000000                             7  *              I Slowed the game down. I changed the sounds.  
00000000                             8  *-----------------------------------------------------------
00001000                             9      ORG    $1000
00001000                            10  START:                  ; first instruction of program
00001000                            11  
00001000                            12  *-----------------------------------------------------------
00001000                            13  * Section       : Trap Codes
00001000                            14  * Description   : Trap Codes used throughout StarterKit
00001000                            15  *-----------------------------------------------------------
00001000                            16  * Trap CODES
00001000  =00000021                 17  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 18  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            19                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 20  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 21  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 22  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            23  
00001000  =00000009                 24  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            25  
00001000                            26  *-----------------------------------------------------------
00001000                            27  * Section       : Charater Setup
00001000                            28  * Description   : Size of Player and Enemy and properties
00001000                            29  * of these characters e.g Starting Positions and Sizes
00001000                            30  *-----------------------------------------------------------
00001000  =00000008                 31  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 32  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            33  
00001000  =00000000                 34  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 35  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000  =00000001                 36  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            37  
00001000  =00000001                 38  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 39  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            40  
00001000  =00000000                 41  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 42  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 43  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            44  
00001000  =00000008                 45  ENMY_W_INIT EQU         08          ; Enemy initial Width
00001000  =00000008                 46  ENMY_H_INIT EQU         08          ; Enemy initial Height
00001000                            47  
00001000                            48  *-----------------------------------------------------------
00001000                            49  * Section       : Game Stats
00001000                            50  * Description   : Points
00001000                            51  *-----------------------------------------------------------
00001000  =00000001                 52  POINTS                  EQU         01          ; Points added
00001000  =00000001                 53  COLLISION_OCCURRED      EQU         1
00001000                            54  
00001000  =00000072                 55  RESTART_KEY             EQU         'r'
00001000                            56  
00001000                            57  *-----------------------------------------------------------
00001000                            58  * Section       : Keyboard Keys
00001000                            59  * Description   : Spacebar and Escape or two functioning keys
00001000                            60  * Spacebar to JUMP and Escape to Exit Game
00001000                            61  *-----------------------------------------------------------
00001000  =00000020                 62  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 63  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            64  
00001000                            65  *-----------------------------------------------------------
00001000                            66  * Subroutine    : Initialise
00001000                            67  * Description   : Initialise game data into memory such as 
00001000                            68  * sounds and screen size
00001000                            69  *-----------------------------------------------------------
00001000                            70  
00001000                            71  INITIALISE:
00001000                            72      ; Initialise Sounds
00001000  6100 03BA                 73      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 03D4                 74      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 03EE                 75      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            76      
0000100C                            77      
0000100C                            78      ; Screen Size
0000100C  103C 0021                 79      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      80      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      81      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 000015D4             82      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      83      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 000015D2             84      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            85  
00001022                            86      ; Place the Player at the center of the screen
00001022  4281                      87      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024  3239 000015D2             88      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000102A  82FC 0002                 89      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000102E  23C1 000015DA             90      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001034                            91  
00001034  4281                      92      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001036  3239 000015D4             93      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000103C  82FC 0002                 94      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001040  23C1 000015DE             95      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001046                            96  
00001046                            97      ; Initialise Player Score
00001046  4281                      98      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001048  7200                      99      MOVE.L  #00,        D1          ; Init Score
0000104A  23C1 000015E2            100      MOVE.L  D1,         PLAYER_SCORE
00001050                           101  
00001050                           102      ; Initialise Player Velocity
00001050  4281                     103      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001052  123C 0000                104      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001056  23C1 000015E6            105      MOVE.L  D1,         PLYR_VELOCITY
0000105C                           106  
0000105C                           107      ; Initialise Player Gravity
0000105C  4281                     108      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000105E  7201                     109      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001060  23C1 000015EA            110      MOVE.L  D1,         PLYR_GRAVITY
00001066                           111  
00001066                           112      ; Initialize Player on Ground
00001066  23FC 00000001 000015EE   113      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001070                           114  
00001070                           115      ; Initial Position for Enemy
00001070  4281                     116      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001072  3239 000015D2            117      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001078  23C1 000015F2            118      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000107E                           119  
0000107E  4281                     120      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001080  3239 000015D4            121      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001086  82FC 0002                122      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000108A  23C1 000015F6            123      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001090                           124  
00001090                           125      ; Enable the screen back buffer(see easy 68k help)
00001090  103C 005C                126      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001094  123C 0011                127      MOVE.B  #17,        D1          ; Combine Tasks
00001098  4E4F                     128      TRAP    #15                     ; Trap (Perform action)
0000109A                           129  
0000109A                           130      ; Clear the screen (see easy 68k help)
0000109A  103C 000B                131      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000109E  323C FF00                132      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010A2  4E4F                     133      TRAP    #15                     ; Trap (Perform action)
000010A4                           134  
000010A4                           135  
000010A4                           136  
000010A4                           137  *-----------------------------------------------------------
000010A4                           138  * Subroutine    : Delay
000010A4                           139  * Description   : Introduces a delay to slow down the game loop
000010A4                           140  *                Adjust the delay value to control the game speed
000010A4                           141  *-----------------------------------------------------------
000010A4                           142  DELAY:
000010A4  203C 00000898            143      MOVE.L  #2200, D0      ; Load delay value into D0
000010AA                           144  DELAY_LOOP:
000010AA  4E71                     145      NOP                         ; No operation, consumes a small amount of time
000010AC  5340                     146      SUBQ.W  #1, D0              ; Decrement D0
000010AE  66FA                     147      BNE.S   DELAY_LOOP          ; Branch back to DELAY_LOOP if D0 is not zero
000010B0  6000 0006                148      BRA GAMELOOP                ; Branch back to GameLoop
000010B4                           149  *-----------------------------------------------------------
000010B4                           150  * Subroutine    : Game
000010B4                           151  * Description   : Game including main GameLoop. GameLoop is like
000010B4                           152  * a while loop in that it runs forever until interrupted
000010B4                           153  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
000010B4                           154  *-----------------------------------------------------------
000010B4                           155  GAME:
000010B4  6100 0318                156      BSR     PLAY_RUN                ; Play Run Wav
000010B8                           157  GAMELOOP:
000010B8                           158      ; Main Gameloop
000010B8                           159     
000010B8  6100 003A                160      BSR     INPUT                   ; Check Keyboard Input
000010BC  6100 007C                161      BSR     UPDATE                  ; Update positions and points
000010C0  6100 027C                162      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010C4  6100 03B0                163      BSR     CHECK_COLLISIONS        ; Check for Collisions
000010C8  6100 00FE                164      BSR     DRAW                    ; Draw the Scene
000010CC  61D6                     165      BSR     DELAY                   ; Introduce a delay
000010CE  61DA                     166      BSR     DELAY_LOOP              ; Introduce the Delayloop
000010D0  6000 00BC                167      BRA     DRAW_BACKGROUND
000010D4                           168      ; Check if a collision occurred
000010D4  0C38 0001 0001           169      CMP.B   #1, COLLISION_OCCURRED  ; Check if collision occurred
000010DA  6700 0416                170      BEQ     END_GAME                ; If collision occurred, end the game
000010DE                           171  
000010DE  0C39 0072 000010F4       172      CMP.B   #RESTART_KEY, INPUT     ; Check for restart key
000010E6  6700 0004                173      BEQ     RESTART_GAME            ; Restart the game if restart key is pressed
000010EA                           174  
000010EA  60CC                     175      BRA     GAMELOOP                ; Loop back to GameLoop
000010EC                           176  
000010EC                           177  
000010EC                           178  RESTART_GAME:
000010EC  6100 0004                179      BSR     RESTART                 ; Call the restart subroutine
000010F0  60C6                     180      BRA     GAMELOOP                ; Continue with the game loop after restart
000010F2                           181  
000010F2                           182  *-----------------------------------------------------------
000010F2                           183  * Subroutine    : Restart Protocol
000010F2                           184  * Description   : Restart the game by reinitializing variables
000010F2                           185  *-----------------------------------------------------------
000010F2                           186  RESTART:
000010F2                           187     
000010F2                           188         
000010F2  4E75                     189      RTS   ; Return to caller
000010F4                           190  
000010F4                           191  *-----------------------------------------------------------
000010F4                           192  * Subroutine    : Input
000010F4                           193  * Description   : Process Keyboard Input
000010F4                           194  *-----------------------------------------------------------
000010F4                           195  INPUT:
000010F4                           196      ; Process Input
000010F4  4281                     197      CLR.L   D1                      ; Clear Data Register
000010F6  103C 0013                198      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000010FA  4E4F                     199      TRAP    #15                     ; Trap (Perform action)
000010FC  1401                     200      MOVE.B  D1,         D2          ; Move last key D1 to D2
000010FE  B43C 0000                201      CMP.B   #00,        D2          ; Key is pressed
00001102  6700 000E                202      BEQ     PROCESS_INPUT           ; Process Key
00001106  4E4F                     203      TRAP    #15                     ; Trap for Last Key
00001108                           204      ; Check if key still pressed
00001108  B23C 00FF                205      CMP.B   #$FF,       D1          ; Is it still pressed
0000110C  6700 0004                206      BEQ     PROCESS_INPUT           ; Process Last Key
00001110  4E75                     207      RTS                             ; Return to subroutine
00001112                           208  
00001112                           209  *-----------------------------------------------------------
00001112                           210  * Subroutine    : Process Input
00001112                           211  * Description   : Branch based on keys pressed
00001112                           212  *-----------------------------------------------------------
00001112                           213  PROCESS_INPUT:
00001112  23C2 000015D6            214      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
00001118  0CB9 0000001B 000015D6   215      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
00001122  6700 03D2                216      BEQ     EXIT                    ; Exit if Escape
00001126  0CB9 00000020 000015D6   217      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
00001130  6700 0260                218      BEQ     JUMP                    ; Jump
00001134  6000 0280                219      BRA     IDLE                    ; Or Idle
00001138  4E75                     220      RTS                             ; Return to subroutine
0000113A                           221  
0000113A                           222  *-----------------------------------------------------------
0000113A                           223  * Subroutine    : Update
0000113A                           224  * Description   : Main update loop update Player and Enemies
0000113A                           225  *-----------------------------------------------------------
0000113A                           226  UPDATE:
0000113A                           227      ; Update the Players Positon based on Velocity and Gravity
0000113A  4281                     228      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000113C  2239 000015E6            229      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
00001142  2439 000015EA            230      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
00001148  D282                     231      ADD.L   D2,         D1          ; Add Gravity to Velocity
0000114A  23C1 000015E6            232      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
00001150  D2B9 000015DE            233      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001156  23C1 000015DE            234      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
0000115C                           235  
0000115C                           236      ; Move the Enemy
0000115C  4281                     237      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000115E  4281                     238      CLR.L   D1                      ; Clear the contents of D0
00001160  2239 000015F2            239      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
00001166  B2BC 00000000            240      CMP.L   #00,        D1
0000116C  6F00 0010                241      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
00001170  6000 0004                242      BRA     MOVE_ENEMY              ; Move the Enemy
00001174                           243  
00001174  4E75                     244      RTS                             ; Return to subroutine  
00001176                           245  
00001176                           246  *-----------------------------------------------------------
00001176                           247  * Subroutine    : Move Enemy
00001176                           248  * Description   : Move Enemy Right to Left
00001176                           249  *-----------------------------------------------------------
00001176                           250  MOVE_ENEMY:
00001176  53B9 000015F2            251      SUB.L   #01,        ENEMY_X     ; Move enemy by X Value
0000117C  4E75                     252      RTS
0000117E                           253  
0000117E                           254  *-----------------------------------------------------------
0000117E                           255  * Subroutine    : Reset Enemy
0000117E                           256  * Description   : Reset Enemy if to passes 0 to Right of Screen
0000117E                           257  *-----------------------------------------------------------
0000117E                           258  RESET_ENEMY_POSITION:
0000117E  4281                     259      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001180  3239 000015D2            260      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001186  23C1 000015F2            261      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000118C  4E75                     262      RTS
0000118E                           263  
0000118E                           264  *-----------------------------------------------------------
0000118E                           265  * Subroutine    : Draw
0000118E                           266  * Description   : Draw Screen
0000118E                           267  *-----------------------------------------------------------
0000118E                           268  DRAW_BACKGROUND:
0000118E  223C 0000FF00            269      MOVE.L  #GREEN, D1          ; Load green color into D1
00001194  103C 000B                270      MOVE.B  #TC_CURSR_P, D0     ; Set Cursor Position
00001198  4E4F                     271      TRAP    #15                  ; Trap (Perform action)
0000119A                           272  
0000119A  103C 0050                273      MOVE.B  #80, D0              ; Task for Background Color
0000119E                           274  
0000119E                           275      ; Load screen width and height from memory
0000119E  3439 000015D2            276      MOVE.W  SCREEN_W, D2         ; Load screen width into D2
000011A4  3639 000015D4            277      MOVE.W  SCREEN_H, D3         ; Load screen height into D3
000011AA                           278  
000011AA  6000 0002                279      BRA     DRAW_ROW             ; Branch to start drawing rows
000011AE                           280  
000011AE                           281  DRAW_ROW:
000011AE  3802                     282      MOVE.W  D2, D4               ; Copy screen width to D4
000011B0  3A03                     283      MOVE.W  D3, D5               ; Copy screen height to D5
000011B2  6000 0002                284      BRA     DRAW_PIXEL           ; Branch to start drawing pixels
000011B6                           285  
000011B6                           286  DRAW_PIXEL:
000011B6  4E4F                     287      TRAP    #15                  ; Draw pixel with current color
000011B8  51CC FFFC                288      DBRA    D4, DRAW_PIXEL       ; Decrement D4 and loop if not zero
000011BC                           289  
000011BC  103C 000B                290      MOVE.B  #TC_CURSR_P, D0     ; Move to next row (assuming TC_CURSR_P serves this purpose)
000011C0  4E4F                     291      TRAP    #15                  ; Trap (Perform action)
000011C2                           292  
000011C2  51CD FFEA                293      DBRA    D5, DRAW_ROW         ; Decrement D5 and loop if not zero
000011C6                           294  
000011C6  4E75                     295      RTS                          ; Return from subroutine
000011C8                           296  DRAW: 
000011C8                           297      ; Enable back buffer
000011C8  103C 005E                298      MOVE.B  #94,        D0
000011CC  4E4F                     299      TRAP    #15
000011CE                           300  
000011CE  223C 0000FF00            301      MOVE.L  #GREEN,     D1          ; Set Background color to green
000011D4  103C 0050                302      MOVE.B  #80,        D0          ; Task for Background Color
000011D8  4E4F                     303      TRAP    #15                     ; Trap (Perform action)
000011DA                           304  
000011DA                           305      ; Clear the screen
000011DA  103C 000B                306      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011DE  323C FF00                307      MOVE.W  #$FF00,     D1          ; Clear contents
000011E2  4E4F                     308      TRAP    #15                     ; Trap (Perform action)
000011E4                           309  
000011E4  6100 000C                310      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000011E8  6100 022C                311      BSR     DRAW_PLAYER             ; Draw Player
000011EC  6100 0258                312      BSR     DRAW_ENEMY              ; Draw Enemy
000011F0  4E75                     313      RTS                             ; Return to subroutine
000011F2                           314  
000011F2                           315  *-----------------------------------------------------------
000011F2                           316  * Subroutine    : Draw Player Data
000011F2                           317  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000011F2                           318  *-----------------------------------------------------------
000011F2                           319  DRAW_PLYR_DATA:
000011F2  4281                     320      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011F4                           321    
000011F4                           322       ;Player Score Message
000011F4  103C 000B                323      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011F8  323C 0101                324      MOVE.W  #$0101,     D1          ; Col 02, Row 01
000011FC  4E4F                     325      TRAP    #15                     ; Trap (Perform action)
000011FE  43F9 00001516            326      LEA     SCORE_MSG,  A1          ; Score Message
00001204  303C 000D                327      MOVE    #13,        D0          ; No Line feed
00001208  4E4F                     328      TRAP    #15                     ; Trap (Perform action)
0000120A                           329  
0000120A                           330      ; Player Score Value
0000120A  103C 000B                331      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000120E  323C 0801                332      MOVE.W  #$0801,     D1          ; Col 09, Row 01
00001212  4E4F                     333      TRAP    #15                     ; Trap (Perform action)
00001214  103C 0003                334      MOVE.B  #03,        D0          ; Display number at D1.L
00001218  2239 000015E2            335      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
0000121E  4E4F                     336      TRAP    #15                     ; Trap (Perform action)
00001220                           337      
00001220                           338      ; Player X Message
00001220  103C 000B                339      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001224  323C 0203                340      MOVE.W  #$0203,     D1          ; Col 02, Row 02
00001228  4E4F                     341      TRAP    #15                     ; Trap (Perform action)
0000122A  43F9 00001598            342      LEA     X_MSG,      A1          ; X Message
00001230  303C 000D                343      MOVE    #13,        D0          ; No Line feed
00001234  4E4F                     344      TRAP    #15                     ; Trap (Perform action)
00001236                           345      
00001236                           346      ; Player X
00001236  103C 000B                347      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
0000123A  323C 0503                348      MOVE.W  #$0503,     D1          ; Col 05, Row 02
0000123E  4E4F                     349      TRAP    #15                     ; Trap (Perform action)
00001240  103C 0003                350      MOVE.B  #03,        D0          ; Display number at D1.L
00001244  2239 000015DA            351      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
0000124A  4E4F                     352      TRAP    #15                     ; Trap (Perform action)
0000124C                           353      
0000124C                           354      ; Player Y Message
0000124C  103C 000B                355      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001250  323C 0204                356      MOVE.W  #$0204,     D1          ; Col 10, Row 02
00001254  4E4F                     357      TRAP    #15                     ; Trap (Perform action)
00001256  43F9 0000159B            358      LEA     Y_MSG,      A1          ; Y Message
0000125C  303C 000D                359      MOVE    #13,        D0          ; No Line feed
00001260  4E4F                     360      TRAP    #15                     ; Trap (Perform action)
00001262                           361      
00001262                           362      ; Player Y
00001262  103C 000B                363      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001266  323C 0504                364      MOVE.W  #$0504,     D1          ; Col 12, Row 02
0000126A  4E4F                     365      TRAP    #15                     ; Trap (Perform action)
0000126C  103C 0003                366      MOVE.B  #03,        D0          ; Display number at D1.L
00001270  2239 000015DE            367      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
00001276  4E4F                     368      TRAP    #15                     ; Trap (Perform action) 
00001278                           369  
00001278                           370      ; Player Velocity Message
00001278  103C 000B                371      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000127C  323C 0206                372      MOVE.W  #$0206,     D1          ; Col 02, Row 03
00001280  4E4F                     373      TRAP    #15                     ; Trap (Perform action)
00001282  43F9 0000159E            374      LEA     V_MSG,      A1          ; Velocity Message
00001288  303C 000D                375      MOVE    #13,        D0          ; No Line feed
0000128C  4E4F                     376      TRAP    #15                     ; Trap (Perform action)
0000128E                           377      
0000128E                           378      ; Player Velocity
0000128E  103C 000B                379      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001292  323C 0906                380      MOVE.W  #$0906,     D1          ; Col 05, Row 03
00001296  4E4F                     381      TRAP    #15                     ; Trap (Perform action)
00001298  103C 0003                382      MOVE.B  #03,        D0          ; Display number at D1.L
0000129C  2239 000015E6            383      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
000012A2  4E4F                     384      TRAP    #15                     ; Trap (Perform action)
000012A4                           385      
000012A4                           386      ; Player Gravity Message
000012A4  103C 000B                387      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012A8  323C 0207                388      MOVE.W  #$0207,     D1          ; Col 10, Row 03
000012AC  4E4F                     389      TRAP    #15                     ; Trap (Perform action)
000012AE  43F9 000015A5            390      LEA     G_MSG,      A1          ; G Message
000012B4  303C 000D                391      MOVE    #13,        D0          ; No Line feed
000012B8  4E4F                     392      TRAP    #15                     ; Trap (Perform action)
000012BA                           393      
000012BA                           394      ; Player Gravity
000012BA  103C 000B                395      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012BE  323C 0B07                396      MOVE.W  #$0B07,     D1          ; Col 12, Row 03
000012C2  4E4F                     397      TRAP    #15                     ; Trap (Perform action)
000012C4  103C 0003                398      MOVE.B  #03,        D0          ; Display number at D1.L
000012C8  2239 000015EA            399      MOVE.L  PLYR_GRAVITY,D1         ; Move Gravity to D1.L
000012CE  4E4F                     400      TRAP    #15                     ; Trap (Perform action)
000012D0                           401  
000012D0                           402      ; Show welcome msg 
000012D0  103C 000B                403      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012D4  323C 1801                404      MOVE.W  #$1801,     D1          ; Col 20, Row 1
000012D8  4E4F                     405      TRAP    #15                     ; Trap (Perform action)
000012DA  43F9 0000151F            406      LEA     WELCOME_MSG, A1         ; Keycode
000012E0  303C 000D                407      MOVE    #13,        D0          ; No Line feed
000012E4  4E4F                     408      TRAP    #15                     ; Trap (Perform action)
000012E6                           409      
000012E6                           410      
000012E6                           411      ; Show welcome msg 2
000012E6  103C 000B                412      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012EA  323C 1803                413      MOVE.W  #$1803,     D1          ; Col 10, Row 03
000012EE  4E4F                     414      TRAP    #15                     ; Trap (Perform action)
000012F0  43F9 0000153D            415      LEA     WELCOME_MSG2,    A1          ; On Ground Message
000012F6  303C 000D                416      MOVE    #13,        D0          ; No Line feed
000012FA  4E4F                     417      TRAP    #15                     ; Trap (Perform action)
000012FC                           418      
000012FC                           419    
000012FC                           420    
000012FC                           421  
000012FC                           422     ; Show welcome msg 2
000012FC  103C 000B                423      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001300  323C 1802                424      MOVE.W  #$1802,     D1          ; Col 10, Row 03
00001304  4E4F                     425      TRAP    #15                     ; Trap (Perform action)
00001306  43F9 00001552            426      LEA     WELCOME_MSG3,    A1          ; On Ground Message
0000130C  303C 000D                427      MOVE    #13,        D0          ; No Line feed
00001310  4E4F                     428      TRAP    #15                     ; Trap (Perform action)
00001312                           429      
00001312                           430  
00001312                           431      ; Show welcome msg 4
00001312  103C 000B                432      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001316  323C 1804                433      MOVE.W  #$1804,     D1          ; Col 02, Row 06
0000131A  4E4F                     434      TRAP    #15                     ; Trap (Perform action)
0000131C  43F9 00001573            435      LEA     WELCOME_MSG4,   A1          ; Draw
00001322  303C 000D                436      MOVE    #13,        D0          ; No Line feed
00001326  4E4F                     437      TRAP    #15                     ; Trap (Perform action)
00001328                           438  
00001328                           439      ; Show how to quit game
00001328  103C 000B                440      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000132C  323C 0219                441      MOVE.W  #$0219,     D1          ; Col 02, Row 07
00001330  4E4F                     442      TRAP    #15                     ; Trap (Perform action)
00001332  43F9 000015AE            443      LEA     QUIT_MSG,   A1          ; Move Idle Message to A1
00001338  303C 000D                444      MOVE    #13,        D0          ; No Line feed
0000133C  4E4F                     445      TRAP    #15                     ; Trap (Perform action)
0000133E                           446  
0000133E                           447   
0000133E                           448  
0000133E                           449  *-----------------------------------------------------------
0000133E                           450  * Subroutine    : Player is on Ground
0000133E                           451  * Description   : Check if the Player is on or off Ground
0000133E                           452  *-----------------------------------------------------------
0000133E                           453  IS_PLAYER_ON_GND:
0000133E                           454      ; Check if Player is on Ground
0000133E  4281                     455      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001340  4282                     456      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00001342  3239 000015D4            457      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001348  82FC 0002                458      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000134C  2439 000015DE            459      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
00001352  B441                     460      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00001354  6C00 0008                461      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00001358  6D00 002C                462      BLT     SET_OFF_GROUND          ; The Player is off the Ground
0000135C  4E75                     463      RTS                             ; Return to subroutine
0000135E                           464  
0000135E                           465  
0000135E                           466  *-----------------------------------------------------------
0000135E                           467  * Subroutine    : On Ground
0000135E                           468  * Description   : Set the Player On Ground
0000135E                           469  *-----------------------------------------------------------
0000135E                           470  SET_ON_GROUND:
0000135E  4281                     471      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001360  3239 000015D4            472      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001366  82FC 0002                473      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000136A  23C1 000015DE            474      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00001370  4281                     475      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001372  7200                     476      MOVE.L  #00,        D1          ; Player Velocity
00001374  23C1 000015E6            477      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
0000137A  23FC 00000001 000015EE   478      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00001384  4E75                     479      RTS
00001386                           480  
00001386                           481  *-----------------------------------------------------------
00001386                           482  * Subroutine    : Off Ground
00001386                           483  * Description   : Set the Player Off Ground
00001386                           484  *-----------------------------------------------------------
00001386                           485  SET_OFF_GROUND:
00001386  23FC 00000000 000015EE   486      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
00001390  4E75                     487      RTS                             ; Return to subroutine
00001392                           488  *-----------------------------------------------------------
00001392                           489  * Subroutine    : Jump
00001392                           490  * Description   : Perform a Jump
00001392                           491  *-----------------------------------------------------------
00001392                           492  JUMP:
00001392  0CB9 00000001 000015EE   493      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000139C  6700 0006                494      BEQ     PERFORM_JUMP            ; Do Jump
000013A0  6000 0012                495      BRA     JUMP_DONE               ;
000013A4                           496  PERFORM_JUMP:
000013A4  6100 0046                497      BSR     PLAY_JUMP               ; Play jump sound
000013A8  23FC FFFFFFEC 000015E6   498      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
000013B2  4E75                     499      RTS                             ; Return to subroutine
000013B4                           500  JUMP_DONE:
000013B4  4E75                     501      RTS                             ; Return to subroutine
000013B6                           502  
000013B6                           503  *-----------------------------------------------------------
000013B6                           504  * Subroutine    : Idle
000013B6                           505  * Description   : Perform a Idle
000013B6                           506  *----------------------------------------------------------- 
000013B6                           507  IDLE:
000013B6  6100 0016                508      BSR     PLAY_RUN                ; Play Run Wav
000013BA  4E75                     509      RTS                             ; Return to subroutine
000013BC                           510  
000013BC                           511  *-----------------------------------------------------------
000013BC                           512  * Subroutines   : Sound Load and Play
000013BC                           513  * Description   : Initialise game sounds into memory 
000013BC                           514  * Current Sounds are RUN, JUMP and Opps for Collision
000013BC                           515  *-----------------------------------------------------------
000013BC                           516  RUN_LOAD:
000013BC  43F9 00001603            517      LEA     RUN_WAV,    A1          ; Load Wav File into A1
000013C2  323C 0000                518      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
000013C6  303C 0047                519      MOVE    #71,        D0          ; Load into memory
000013CA  4E4F                     520      TRAP    #15                     ; Trap (Perform action)
000013CC  4E75                     521      RTS                             ; Return to subroutine
000013CE                           522  
000013CE                           523  PLAY_RUN:
000013CE  323C 0000                524      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
000013D2  303C 0048                525      MOVE    #72,        D0          ; Play Sound
000013D6  4E4F                     526      TRAP    #15                     ; Trap (Perform action)
000013D8  4E75                     527      RTS                             ; Return to subroutine
000013DA                           528  
000013DA                           529  JUMP_LOAD:
000013DA  43F9 000015FA            530      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
000013E0  323C 0001                531      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
000013E4  303C 0047                532      MOVE    #71,        D0          ; Load into memory
000013E8  4E4F                     533      TRAP    #15                     ; Trap (Perform action)
000013EA  4E75                     534      RTS                             ; Return to subroutine
000013EC                           535  
000013EC                           536  PLAY_JUMP:
000013EC  323C 0001                537      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000013F0  303C 0048                538      MOVE    #72,        D0          ; Play Sound
000013F4  4E4F                     539      TRAP    #15                     ; Trap (Perform action)
000013F6  4E75                     540      RTS                             ; Return to subroutine
000013F8                           541  
000013F8                           542  OPPS_LOAD:
000013F8  43F9 00001612            543      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
000013FE  323C 0002                544      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
00001402  303C 0047                545      MOVE    #71,        D0          ; Load into memory
00001406  4E4F                     546      TRAP    #15                     ; Trap (Perform action)
00001408  4E75                     547      RTS                             ; Return to subroutine
0000140A                           548  
0000140A                           549  PLAY_OPPS:
0000140A  323C 0002                550      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
0000140E  303C 0048                551      MOVE    #72,        D0          ; Play Sound
00001412  4E4F                     552      TRAP    #15                     ; Trap (Perform action)
00001414  4E75                     553      RTS                             ; Return to subroutine
00001416                           554  
00001416                           555  *-----------------------------------------------------------
00001416                           556  * Subroutine    : Draw Player
00001416                           557  * Description   : Draw Player Square
00001416                           558  *-----------------------------------------------------------
00001416                           559  DRAW_PLAYER:
00001416                           560      ; Set Pixel Colors
00001416  223C 00FFA500            561      MOVE.L  #BRIGHT_BLUE,     D1          ; Set Background color
0000141C  103C 0050                562      MOVE.B  #80,        D0          ; Task for Background Color
00001420  4E4F                     563      TRAP    #15                     ; Trap (Perform action)
00001422                           564  
00001422                           565      ; Set X, Y, Width and Height
00001422  2239 000015DA            566      MOVE.L  PLAYER_X,   D1          ; X
00001428  2439 000015DE            567      MOVE.L  PLAYER_Y,   D2          ; Y
0000142E  2639 000015DA            568      MOVE.L  PLAYER_X,   D3
00001434  5083                     569      ADD.L   #PLYR_W_INIT,   D3      ; Width
00001436  2839 000015DE            570      MOVE.L  PLAYER_Y,   D4 
0000143C  5084                     571      ADD.L   #PLYR_H_INIT,   D4      ; Height
0000143E                           572      
0000143E                           573      ; Draw Player
0000143E  103C 0057                574      MOVE.B  #87,        D0          ; Draw Player
00001442  4E4F                     575      TRAP    #15                     ; Trap (Perform action)
00001444  4E75                     576      RTS                             ; Return to subroutine
00001446                           577  
00001446                           578  *-----------------------------------------------------------
00001446                           579  * Subroutine    : Draw Enemy
00001446                           580  * Description   : Draw Enemy Square
00001446                           581  *-----------------------------------------------------------
00001446                           582  DRAW_ENEMY:
00001446                           583      ; Set Pixel Colors
00001446  223C 000000FF            584      MOVE.L  #RED,       D1          ; Set Background color
0000144C  103C 0050                585      MOVE.B  #80,        D0          ; Task for Background Color
00001450  4E4F                     586      TRAP    #15                     ; Trap (Perform action)
00001452                           587      ; Set X, Y, Width and Height
00001452  2239 000015F2            588      MOVE.L  ENEMY_X,    D1          ; X
00001458  2439 000015F6            589      MOVE.L  ENEMY_Y,    D2          ; Y
0000145E  2639 000015F2            590      MOVE.L  ENEMY_X,    D3
00001464  5083                     591      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001466  2839 000015F6            592      MOVE.L  ENEMY_Y,    D4 
0000146C  5084                     593      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000146E                           594      
0000146E                           595      ; Draw Enemy    
0000146E  103C 0057                596      MOVE.B  #87,        D0          ; Draw Enemy
00001472  4E4F                     597      TRAP    #15                     ; Trap (Perform action)
00001474  4E75                     598      RTS                             ; Return to subroutine
00001476                           599  
00001476                           600                           
00001476                           601                              
00001476                           602    *-----------------------------------------------------------
00001476                           603  * Subroutine    : Collision Check
00001476                           604  * Description   : Axis-Aligned Bounding Box Collision Detection
00001476                           605  * Algorithm checks for overlap on the 4 sides of the Player and 
00001476                           606  * Enemy rectangles
00001476                           607  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001476                           608  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001476                           609  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001476                           610  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001476                           611  *-----------------------------------------------------------
00001476                           612  CHECK_COLLISIONS:
00001476  4281                     613      CLR.L   D1                      ; Clear D1
00001478  4282                     614      CLR.L   D2                      ; Clear D2PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
0000147A  2239 000015DA            615      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001480  2439 000015F2            616      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001486  D4B8 0008                617      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000148A  B481                     618      CMP.L   D1,         D2          ; Do the Overlap ?
0000148C  6F00 0006                619      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00001490  6000 0044                620      BRA     COLLISION_CHECK_DONE    ; If not, no collision
00001494                           621  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001494  D2B8 0008                622      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001498  2439 000015F2            623      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
0000149E  B481                     624      CMP.L   D1,         D2          ; Do they Overlap ?
000014A0  6C00 0006                625      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal ?
000014A4  6000 0030                626      BRA     COLLISION_CHECK_DONE    ; If not, no collision   
000014A8                           627  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
000014A8  2239 000015DE            628      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000014AE  2439 000015F6            629      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
000014B4  D4B8 0008                630      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000014B8  B481                     631      CMP.L   D1,         D2          ; Do they Overlap ?
000014BA  6F00 0006                632      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal ?
000014BE  6000 0016                633      BRA     COLLISION_CHECK_DONE    ; If not, no collision 
000014C2                           634  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
000014C2  D2B8 0008                635      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000014C6  2439 000015F6            636      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
000014CC  B481                     637      CMP.L   D1,         D2          ; Do they Overlap ?
000014CE  6C00 0018                638      BGE     COLLISION               ; Collision!
000014D2  6000 0002                639      BRA     COLLISION_CHECK_DONE    ; If not, no collision
000014D6                           640  COLLISION_CHECK_DONE:               ; No Collision Update points
000014D6  5281                     641      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000014D8  D2B9 000015E2            642      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000014DE  23C1 000015E2            643      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000014E4  4E75                     644      RTS               ; End the game
000014E6                           645  NO_COLLISION:
000014E6                           646  
000014E6  4E75                     647     RTS
000014E8                           648  COLLISION:
000014E8  6100 FF20                649      BSR     PLAY_OPPS               ; Play Opps Wav
000014EC  6100 0008                650      BSR     EXIT
000014F0  4E75                     651      RTS
000014F2                           652  
000014F2                           653  END_GAME:
000014F2  6000 0002                654      BRA     EXIT                    ; End the game
000014F6                           655  
000014F6                           656                       ; Return to subroutine
000014F6                           657    
000014F6                           658  *-----------------------------------------------------------
000014F6                           659  * Subroutine    : EXIT
000014F6                           660  * Description   : Exit message and End Game
000014F6                           661  *-----------------------------------------------------------
000014F6                           662  EXIT:
000014F6                           663      ; Show if Exiting is Running
000014F6                           664  
000014F6                           665      ; Show if Exiting is Running
000014F6  103C 000B                666      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014FA  323C 4004                667      MOVE.W  #$4004,     D1          ; Col 40, Row 1
000014FE  4E4F                     668      TRAP    #15                     ; Trap (Perform action)
00001500  43F9 000015C6            669      LEA     EXIT_MSG,   A1          ; Exit
00001506  303C 000D                670      MOVE    #13,        D0          ; No Line feed
0000150A  4E4F                     671      TRAP    #15                     ; Trap (Perform action)
0000150C                           672  
0000150C  103C 0009                673      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001510  4E4F                     674      TRAP    #15                     ; Exit program
00001512                           675                     ; Trap (Perform action)
00001512  FFFF FFFF                676      SIMHALT
00001516                           677  
00001516                           678  
00001516                           679  *-----------------------------------------------------------
00001516                           680  * Section       : Messages
00001516                           681  * Description   : Messages to Print on Console, names should be
00001516                           682  * self documenting
00001516                           683  *-----------------------------------------------------------
00001516= 53 63 6F 72 65 20 ...    684  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
0000151F= 53 74 65 70 68 65 ...    685  WELCOME_MSG:    DC.B    'Stephen Foleys Endless runner', 0    ; New game title message (with newline)
0000153D= 48 6F 77 20 66 61 ...    686  WELCOME_MSG2:   DC.B    'How far can you get?', 0    ; How far can you get? message (with newline)
00001552= 54 68 65 20 63 75 ...    687  WELCOME_MSG3:   DC.B    'The current high score is 999999', 0    ; High score message (with newline)
00001573= 20 20 20 20 20 20 ...    688  WELCOME_MSG4:   DC.B    '       GOOD LUCK !         '    , 0    ; Good luck message (with additional leading spaces)
0000158F                           689  
0000158F                           690  
0000158F                           691  
0000158F= 4A 75 6D 70 2E 2E ...    692  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00001598                           693  
00001598= 58 3A 00                 694  X_MSG           DC.B    'X:', 0             ; X Position Message
0000159B= 59 3A 00                 695  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
0000159E= 53 70 65 65 64 3A 00     696  V_MSG           DC.B    'Speed:', 0             ; Velocity Position Message
000015A5= 47 72 61 76 69 74 ...    697  G_MSG           DC.B    'Gravity:', 0             ; Gravity Position Message
000015AE= 54 6F 20 51 75 69 ...    698  QUIT_MSG        DC.B    'To Quit press "ESC" Key', 0
000015C6= 45 78 69 74 69 6E ...    699  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
000015D2                           700  
000015D2                           701  *-----------------------------------------------------------
000015D2                           702  * Section       : Graphic Colors
000015D2                           703  * Description   : Screen Pixel Color
000015D2                           704  *-----------------------------------------------------------
000015D2  =000000FF                705  RED           EQU     $0000FF   ; Red color            
000015D2  =00FFA500                706  BRIGHT_BLUE   EQU     $FFA500   ; Bright blue color
000015D2  =0000FF00                707  GREEN          EQU     $00FF00   ; Green color            
000015D2                           708  
000015D2                           709  
000015D2                           710  
000015D2                           711  *-----------------------------------------------------------
000015D2                           712  * Section       : Screen Size
000015D2                           713  * Description   : Screen Width and Height
000015D2                           714  *-----------------------------------------------------------
000015D2                           715  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000015D4                           716  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000015D6                           717  
000015D6                           718  *-----------------------------------------------------------
000015D6                           719  * Section       : Keyboard Input
000015D6                           720  * Description   : Used for storing Keypresses
000015D6                           721  *-----------------------------------------------------------
000015D6                           722  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
000015DA                           723  
000015DA                           724  *-----------------------------------------------------------
000015DA                           725  * Section       : Character Positions
000015DA                           726  * Description   : Player and Enemy Position Memory Locations
000015DA                           727  *-----------------------------------------------------------
000015DA                           728  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
000015DE                           729  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000015E2                           730  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000015E6                           731  
000015E6                           732  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000015EA                           733  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
000015EE                           734  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
000015F2                           735  
000015F2                           736  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
000015F6                           737  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Positionar
000015FA                           738  *-----------------------------------------------------------
000015FA                           739  * Section       : Sounds
000015FA                           740  * Description   : Sound files, which are then loaded and given
000015FA                           741  * an address in memory, they take a longtime to process and play
000015FA                           742  * so keep the files small. Used https://voicemaker.in/ to 
000015FA                           743  * generate and Audacity to convert MP3 to WAV
000015FA                           744  *-----------------------------------------------------------
000015FA= 6A 75 6D 70 2E 77 ...    745  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
00001603= 6C 61 73 65 72 73 ...    746  RUN_WAV         DC.B    'lasershoot.wav',0         ; Run Sound
00001612= 68 69 74 48 75 72 ...    747  OPPS_WAV        DC.B    'hitHurt.wav',0        ; Collision Opps
0000161E                           748  
0000161E                           749      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BRIGHT_BLUE         FFA500
CHECK_COLLISIONS    1476
COLLISION           14E8
COLLISION_CHECK_DONE  14D6
COLLISION_OCCURRED  1
CURRENT_KEY         15D6
DELAY               10A4
DELAY_LOOP          10AA
DRAW                11C8
DRAW_BACKGROUND     118E
DRAW_ENEMY          1446
DRAW_PIXEL          11B6
DRAW_PLAYER         1416
DRAW_PLYR_DATA      11F2
DRAW_ROW            11AE
END_GAME            14F2
ENEMY_X             15F2
ENEMY_Y             15F6
ENMY_H_INIT         8
ENMY_W_INIT         8
ESCAPE              1B
EXIT                14F6
EXIT_MSG            15C6
GAME                10B4
GAMELOOP            10B8
GND_FALSE           0
GND_TRUE            1
GREEN               FF00
G_MSG               15A5
IDLE                13B6
INITIALISE          1000
INPUT               10F4
IS_PLAYER_ON_GND    133E
JMP_INDEX           1
JUMP                1392
JUMP_DONE           13B4
JUMP_LOAD           13DA
JUMP_MSG            158F
JUMP_WAV            15FA
MOVE_ENEMY          1176
NO_COLLISION        14E6
OPPS_INDEX          2
OPPS_LOAD           13F8
OPPS_WAV            1612
PERFORM_JUMP        13A4
PLAYER_SCORE        15E2
PLAYER_X            15DA
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1494
PLAYER_Y            15DE
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  14A8
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  14C2
PLAY_JUMP           13EC
PLAY_OPPS           140A
PLAY_RUN            13CE
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        15EA
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         15EE
PLYR_VELOCITY       15E6
PLYR_W_INIT         8
POINTS              1
PROCESS_INPUT       1112
QUIT_MSG            15AE
RED                 FF
RESET_ENEMY_POSITION  117E
RESTART             10F2
RESTART_GAME        10EC
RESTART_KEY         72
RUN_INDEX           0
RUN_LOAD            13BC
RUN_WAV             1603
SCORE_MSG           1516
SCREEN_H            15D4
SCREEN_W            15D2
SET_OFF_GROUND      1386
SET_ON_GROUND       135E
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              113A
V_MSG               159E
WELCOME_MSG         151F
WELCOME_MSG2        153D
WELCOME_MSG3        1552
WELCOME_MSG4        1573
X_MSG               1598
Y_MSG               159B
