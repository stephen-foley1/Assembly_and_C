00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 05/03/2024 10:39:57

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner 
00000000                             3  * Written by : Stephen Foley
00000000                             4  * Date       : 19/02/24
00000000                             5  * Description: Endless Runner Project based off the starter kit provided by philip bourke.
00000000                             6  *              I Changed the Colour of the player. I changed the shape and size of the rectangles.
00000000                             7  *              I Slowed the game down. I changed the sounds.  
00000000                             8  *-----------------------------------------------------------
00001000                             9      ORG    $1000
00001000                            10  START:                  ; first instruction of program
00001000                            11  
00001000                            12  *-----------------------------------------------------------
00001000                            13  * Section       : Trap Codes
00001000                            14  * Description   : Trap Codes used throughout StarterKit
00001000                            15  *-----------------------------------------------------------
00001000                            16  * Trap CODES
00001000  =00000021                 17  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 18  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            19                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 20  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 21  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 22  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            23  
00001000  =00000009                 24  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            25  
00001000                            26  *-----------------------------------------------------------
00001000                            27  * Section       : Charater Setup
00001000                            28  * Description   : Size of Player and Enemy and properties
00001000                            29  * of these characters e.g Starting Positions and Sizes
00001000                            30  *-----------------------------------------------------------
00001000  =00000008                 31  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 32  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            33  
00001000  =00000000                 34  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 35  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000  =00000001                 36  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            37  
00001000  =00000001                 38  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 39  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            40  
00001000  =00000000                 41  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 42  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 43  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            44  
00001000  =00000008                 45  ENMY_W_INIT     EQU         08          ; Enemy initial Width
00001000  =00000008                 46  ENMY_H_INIT     EQU         08          ; Enemy initial Height
00001000  =0000000A                 47  ENMY2_W_INIT    EQU         10          ; Enemy initial Height
00001000  =0000000A                 48  ENMY2_H_INIT    EQU         10          ; Enemy initial Height
00001000                            49  *-----------------------------------------------------------
00001000                            50  * Section       : Game Stats
00001000                            51  * Description   : Points
00001000                            52  *-----------------------------------------------------------
00001000  =00000001                 53  POINTS                  EQU         01          ; Points added
00001000  =00000001                 54  COLLISION_OCCURRED      EQU         1
00001000                            55  
00001000  =00000072                 56  RESTART_KEY             EQU         'r'
00001000                            57  
00001000                            58  *-----------------------------------------------------------
00001000                            59  * Section       : Keyboard Keys
00001000                            60  * Description   : Spacebar and Escape or two functioning keys
00001000                            61  * Spacebar to JUMP and Escape to Exit Game
00001000                            62  *-----------------------------------------------------------
00001000  =00000020                 63  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 64  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            65  
00001000                            66  *-----------------------------------------------------------
00001000                            67  * Subroutine    : Initialise
00001000                            68  * Description   : Initialise game data into memory such as 
00001000                            69  * sounds and screen size
00001000                            70  *-----------------------------------------------------------
00001000                            71  INITIALISE:
00001000                            72      ; Initialise Sounds
00001000                            73     
00001000                            74      ; Screen Size
00001000  103C 0021                 75      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001004  7200                      76      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001006  4E4F                      77      TRAP    #15                     ; interpret D0 and D1 for screen size
00001008  33C1 00001664             78      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000100E  4841                      79      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001010  33C1 00001662             80      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001016                            81  
00001016                            82      ; Place the Player at the center of the screen
00001016  4281                      83      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001018  3239 00001662             84      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000101E  82FC 0002                 85      DIVU    #02,        D1          ; divide by 2 for center on X Axis
00001022  23C1 0000166A             86      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001028                            87  
00001028  4281                      88      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000102A  3239 00001664             89      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001030  82FC 0002                 90      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001034  23C1 0000166E             91      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
0000103A                            92  
0000103A                            93      ; Initialise Player Score
0000103A  4281                      94      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000103C  7200                      95      MOVE.L  #00,        D1          ; Init Score
0000103E  23C1 00001672             96      MOVE.L  D1,         PLAYER_SCORE
00001044                            97  
00001044                            98      ; Initialise Player Velocity
00001044  4281                      99      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001046  123C 0000                100      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
0000104A  23C1 00001676            101      MOVE.L  D1,         PLYR_VELOCITY
00001050                           102  
00001050                           103      ; Initialise Player Gravity
00001050  4281                     104      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001052  7201                     105      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001054  23C1 0000167A            106      MOVE.L  D1,         PLYR_GRAVITY
0000105A                           107  
0000105A                           108      ; Initialize Player on Ground
0000105A  23FC 00000001 0000167E   109      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001064                           110  
00001064                           111      ; Initial Position for Enemy
00001064  4281                     112      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001066  3239 00001662            113      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000106C  23C1 00001682            114      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001072                           115      
00001072  4281                     116      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001074  3239 00001664            117      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000107A  82FC 0002                118      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000107E  23C1 00001686            119      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001084                           120      
00001084                           121        ; Initial Position for Enemy2
00001084  4281                     122      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001086  3239 00001662            123      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000108C  23C1 0000168A            124      MOVE.L  D1,         ENEMY_X2     ; Enemy X Position
00001092                           125  
00001092  4281                     126      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001094  3239 00001664            127      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000109A  82FC 0002                128      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000109E  23C1 0000168E            129      MOVE.L  D1,         ENEMY_Y2     ; Enemy Y Position
000010A4                           130  
000010A4                           131    
000010A4                           132  
000010A4                           133  
000010A4                           134      ; Enable the screen back buffer(see easy 68k help)
000010A4  103C 005C                135      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
000010A8  123C 0011                136      MOVE.B  #17,        D1          ; Combine Tasks
000010AC  4E4F                     137      TRAP    #15                     ; Trap (Perform action)
000010AE                           138  
000010AE                           139      ; Clear the screen (see easy 68k help)
000010AE  103C 000B                140      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000010B2  323C FF00                141      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010B6  4E4F                     142      TRAP    #15                     ; Trap (Perform action)
000010B8                           143  
000010B8                           144  
000010B8                           145  
000010B8                           146  *-----------------------------------------------------------
000010B8                           147  * Subroutine    : Delay
000010B8                           148  * Description   : Introduces a delay to slow down the game loop
000010B8                           149  *                Adjust the delay value to control the game speed
000010B8                           150  *-----------------------------------------------------------
000010B8                           151  DELAY:
000010B8  203C 00002710            152      MOVE.L  #10000, D0      ; Load delay value into D0
000010BE                           153  DELAY_LOOP:
000010BE  4E71                     154      NOP                         ; No operation, consumes a small amount of time
000010C0  5340                     155      SUBQ.W  #1, D0              ; Decrement D0
000010C2  66FA                     156      BNE.S   DELAY_LOOP          ; Branch back to DELAY_LOOP if D0 is not zero
000010C4  6000 0002                157      BRA GAMELOOP                ; Branch back to GameLoop
000010C8                           158  *-----------------------------------------------------------
000010C8                           159  * Subroutine    : Game
000010C8                           160  * Description   : Game including main GameLoop. GameLoop is like
000010C8                           161  * a while loop in that it runs forever until interrupted
000010C8                           162  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
000010C8                           163  *-----------------------------------------------------------
000010C8                           164  GAME:
000010C8                           165                     ; Play Run Wav
000010C8                           166  GAMELOOP:
000010C8                           167      ; Main Gameloop
000010C8  6100 0036                168      BSR     INPUT                   ; Check Keyboard Input
000010CC  6100 0078                169      BSR     UPDATE                  ; Update positions and points
000010D0  6100 026C                170      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010D4  6100 03C2                171      BSR     CHECK_COLLISIONS        ; Check for Collisions
000010D8  6100 00F6                172      BSR     DRAW                    ; Draw the Scene
000010DC  61DA                     173      BSR     DELAY                   ; Introduce a delay
000010DE  61DE                     174      BSR     DELAY_LOOP              ; Introduce the Delayloop
000010E0                           175  
000010E0                           176      ; Check if a collision occurred
000010E0  0C38 0001 0001           177      CMP.B   #1, COLLISION_OCCURRED  ; Check if collision occurred
000010E6  6700 049A                178      BEQ     END_GAME                ; If collision occurred, end the game
000010EA                           179  
000010EA  0C39 0072 00001100       180      CMP.B   #RESTART_KEY, INPUT     ; Check for restart key
000010F2  6700 0004                181      BEQ     RESTART_GAME            ; Restart the game if restart key is pressed
000010F6                           182  
000010F6  60D0                     183      BRA     GAMELOOP                ; Loop back to GameLoop
000010F8                           184  
000010F8                           185  
000010F8                           186  RESTART_GAME:
000010F8  6100 0004                187      BSR     RESTART                 ; Call the restart subroutine
000010FC  60CA                     188      BRA     GAMELOOP                ; Continue with the game loop after restart
000010FE                           189  
000010FE                           190  *-----------------------------------------------------------
000010FE                           191  * Subroutine    : Restart Protocol
000010FE                           192  * Description   : Restart the game by reinitializing variables
000010FE                           193  *-----------------------------------------------------------
000010FE                           194  RESTART:
000010FE                           195     
000010FE                           196         
000010FE  4E75                     197      RTS   ; Return to caller
00001100                           198  
00001100                           199  *-----------------------------------------------------------
00001100                           200  * Subroutine    : Input
00001100                           201  * Description   : Process Keyboard Input
00001100                           202  *-----------------------------------------------------------
00001100                           203  INPUT:
00001100                           204      ; Process Input
00001100  4281                     205      CLR.L   D1                      ; Clear Data Register
00001102  103C 0013                206      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
00001106  4E4F                     207      TRAP    #15                     ; Trap (Perform action)
00001108  1401                     208      MOVE.B  D1,         D2          ; Move last key D1 to D2
0000110A  B43C 0000                209      CMP.B   #00,        D2          ; Key is pressed
0000110E  6700 000E                210      BEQ     PROCESS_INPUT           ; Process Key
00001112  4E4F                     211      TRAP    #15                     ; Trap for Last Key
00001114                           212      ; Check if key still pressed
00001114  B23C 00FF                213      CMP.B   #$FF,       D1          ; Is it still pressed
00001118  6700 0004                214      BEQ     PROCESS_INPUT           ; Process Last Key
0000111C  4E75                     215      RTS                             ; Return to subroutine
0000111E                           216  
0000111E                           217  *-----------------------------------------------------------
0000111E                           218  * Subroutine    : Process Input
0000111E                           219  * Description   : Branch based on keys pressed
0000111E                           220  *-----------------------------------------------------------
0000111E                           221  PROCESS_INPUT:
0000111E  23C2 00001666            222      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
00001124  0CB9 0000001B 00001666   223      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
0000112E  6700 0456                224      BEQ     EXIT                    ; Exit if Escape
00001132  0CB9 00000020 00001666   225      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
0000113C  6700 0254                226      BEQ     JUMP                    ; Jump
00001140  6000 0270                227      BRA     IDLE                    ; Or Idle
00001144  4E75                     228      RTS                             ; Return to subroutine
00001146                           229  
00001146                           230  *-----------------------------------------------------------
00001146                           231  * Subroutine    : Update
00001146                           232  * Description   : Main update loop update Player and Enemies
00001146                           233  *-----------------------------------------------------------
00001146                           234  UPDATE:
00001146                           235      ; Update the Players Positon based on Velocity and Gravity
00001146  4281                     236      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001148  2239 00001676            237      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
0000114E  2439 0000167A            238      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
00001154  D282                     239      ADD.L   D2,         D1          ; Add Gravity to Velocity
00001156  23C1 00001676            240      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
0000115C  D2B9 0000166E            241      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001162  23C1 0000166E            242      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
00001168                           243  
00001168                           244      
00001168                           245                  
00001168  6100 0008                246      BSR     MOVE_ENEMY              ; Move the Enemy
0000116C  6100 001C                247      BSR     MOVE_ENEMY2             ; Move the Enemy2
00001170  4E75                     248      RTS                  
00001172                           249  
00001172                           250  *-----------------------------------------------------------
00001172                           251  * Subroutine    : Move Enemy
00001172                           252  * Description   : Move Enemy Right to Left
00001172                           253  *-----------------------------------------------------------
00001172                           254  MOVE_ENEMY:
00001172  55B9 00001682            255      SUB.L   #02,        ENEMY_X     ; Move enemy by X Value
00001178  0CB9 00000000 00001682   256      CMP.L   #0, ENEMY_X             ; Check if enemy moved off-screen
00001182  6E00 0020                257      BGT     NO_RESET_ENEMY          ; If not, skip reset
00001186  6100 0020                258      BSR     RESET_ENEMY_POSITION    ; Reset enemy position
0000118A                           259      
0000118A                           260      
0000118A                           261  MOVE_ENEMY2:
0000118A  53B9 0000168A            262      SUB.L   #01,        ENEMY_X2     ; Move enemy by X Value
00001190  0CB9 00000000 0000168A   263      CMP.L   #0, ENEMY_X2            ; Check if enemy moved off-screen
0000119A  6E00 000A                264      BGT     NO_RESET_ENEMY2         ; If not, skip reset
0000119E  6100 0018                265      BSR     RESET_ENEMY2_POSITION   ; Reset enemy position
000011A2  4E75                     266      RTS
000011A4                           267      
000011A4                           268  NO_RESET_ENEMY:
000011A4  4E75                     269      RTS
000011A6                           270  NO_RESET_ENEMY2:
000011A6  4E75                     271      RTS
000011A8                           272  
000011A8                           273  *-----------------------------------------------------------
000011A8                           274  * Subroutine    : Reset Enemy
000011A8                           275  * Description   : Reset Enemy if to passes 0 to Right of Screen
000011A8                           276  *-----------------------------------------------------------
000011A8                           277  RESET_ENEMY_POSITION:
000011A8  4281                     278      CLR.L   D1
000011AA  3239 00001662            279      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000011B0  23C1 00001682            280      MOVE.L  D1,         ENEMY_X     ; Reset enemy X Position
000011B6  4E75                     281      RTS
000011B8                           282  
000011B8                           283      
000011B8                           284  RESET_ENEMY2_POSITION:
000011B8  4281                     285      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011BA  3239 00001662            286      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000011C0  3439 00001664            287      MOVE.W  SCREEN_H,    D2
000011C6  23C1 0000168A            288      MOVE.L  D1,         ENEMY_X2    ; Reset enemy X Position
000011CC  4E75                     289      RTS
000011CE                           290  END_RESET_ENEMY:
000011CE  4E75                     291      RTS 
000011D0                           292  *-----------------------------------------------------------
000011D0                           293  * Subroutine    : Draw
000011D0                           294  * Description   : Draw Screen
000011D0                           295  *-----------------------------------------------------------
000011D0                           296  DRAW: 
000011D0                           297      ; Enable back buffer
000011D0  103C 005E                298      MOVE.B  #94,        D0
000011D4  4E4F                     299      TRAP    #15
000011D6                           300  
000011D6                           301      ; Clear the screen
000011D6  103C 000B                302      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011DA  323C FF00                303      MOVE.W  #$FF00,     D1          ; Clear contents
000011DE  4E4F                     304      TRAP    #15                     ; Trap (Perform action)
000011E0                           305  
000011E0  6100 0010                306      BSR     DRAW_PLYR_DATA          ; Draw Score, HUD, Player X and Y
000011E4  6100 01CE                307      BSR     DRAW_PLAYER             ; Draw Player
000011E8  6100 01FA                308      BSR     DRAW_ENEMY              ; Draw Enemy
000011EC  6100 0226                309      BSR     DRAW_ENEMY2              ; Draw Enemy
000011F0  4E75                     310      RTS                             ; Return to subroutine
000011F2                           311     
000011F2                           312  
000011F2                           313  
000011F2                           314  *-----------------------------------------------------------
000011F2                           315  * Subroutine    : Draw Player Data
000011F2                           316  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000011F2                           317  *-----------------------------------------------------------
000011F2                           318  DRAW_PLYR_DATA:
000011F2  4281                     319      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011F4                           320    
000011F4                           321       ;Player Score Message
000011F4  103C 000B                322      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011F8  323C 0101                323      MOVE.W  #$0101,     D1          ; Col 02, Row 01
000011FC  4E4F                     324      TRAP    #15                     ; Trap (Perform action)
000011FE  43F9 000015A6            325      LEA     SCORE_MSG,  A1          ; Score Message
00001204  303C 000D                326      MOVE    #13,        D0          ; No Line feed
00001208  4E4F                     327      TRAP    #15                     ; Trap (Perform action)
0000120A                           328  
0000120A                           329      ; Player Score Value
0000120A  103C 000B                330      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000120E  323C 0801                331      MOVE.W  #$0801,     D1          ; Col 09, Row 01
00001212  4E4F                     332      TRAP    #15                     ; Trap (Perform action)
00001214  103C 0003                333      MOVE.B  #03,        D0          ; Display number at D1.L
00001218  2239 00001672            334      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
0000121E  4E4F                     335      TRAP    #15                     ; Trap (Perform action)
00001220                           336      
00001220                           337      ; Player X Message
00001220  103C 000B                338      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001224  323C 0203                339      MOVE.W  #$0203,     D1          ; Col 02, Row 02
00001228  4E4F                     340      TRAP    #15                     ; Trap (Perform action)
0000122A  43F9 00001628            341      LEA     X_MSG,      A1          ; X Message
00001230  303C 000D                342      MOVE    #13,        D0          ; No Line feed
00001234  4E4F                     343      TRAP    #15                     ; Trap (Perform action)
00001236                           344      
00001236                           345      ; Player X
00001236  103C 000B                346      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
0000123A  323C 0503                347      MOVE.W  #$0503,     D1          ; Col 05, Row 02
0000123E  4E4F                     348      TRAP    #15                     ; Trap (Perform action)
00001240  103C 0003                349      MOVE.B  #03,        D0          ; Display number at D1.L
00001244  2239 0000166A            350      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
0000124A  4E4F                     351      TRAP    #15                     ; Trap (Perform action)
0000124C                           352      
0000124C                           353      ; Player Y Message
0000124C  103C 000B                354      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001250  323C 0204                355      MOVE.W  #$0204,     D1          ; Col 10, Row 02
00001254  4E4F                     356      TRAP    #15                     ; Trap (Perform action)
00001256  43F9 0000162B            357      LEA     Y_MSG,      A1          ; Y Message
0000125C  303C 000D                358      MOVE    #13,        D0          ; No Line feed
00001260  4E4F                     359      TRAP    #15                     ; Trap (Perform action)
00001262                           360      
00001262                           361      ; Player Y
00001262  103C 000B                362      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001266  323C 0504                363      MOVE.W  #$0504,     D1          ; Col 12, Row 02
0000126A  4E4F                     364      TRAP    #15                     ; Trap (Perform action)
0000126C  103C 0003                365      MOVE.B  #03,        D0          ; Display number at D1.L
00001270  2239 0000166E            366      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
00001276  4E4F                     367      TRAP    #15                     ; Trap (Perform action) 
00001278                           368  
00001278                           369      ; Player Velocity Message
00001278  103C 000B                370      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000127C  323C 0206                371      MOVE.W  #$0206,     D1          ; Col 02, Row 03
00001280  4E4F                     372      TRAP    #15                     ; Trap (Perform action)
00001282  43F9 0000162E            373      LEA     V_MSG,      A1          ; Velocity Message
00001288  303C 000D                374      MOVE    #13,        D0          ; No Line feed
0000128C  4E4F                     375      TRAP    #15                     ; Trap (Perform action)
0000128E                           376      
0000128E                           377      ; Player Velocity
0000128E  103C 000B                378      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001292  323C 0906                379      MOVE.W  #$0906,     D1          ; Col 05, Row 03
00001296  4E4F                     380      TRAP    #15                     ; Trap (Perform action)
00001298  103C 0003                381      MOVE.B  #03,        D0          ; Display number at D1.L
0000129C  2239 00001676            382      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
000012A2  4E4F                     383      TRAP    #15                     ; Trap (Perform action)
000012A4                           384      
000012A4                           385      ; Player Gravity Message
000012A4  103C 000B                386      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012A8  323C 0207                387      MOVE.W  #$0207,     D1          ; Col 10, Row 03
000012AC  4E4F                     388      TRAP    #15                     ; Trap (Perform action)
000012AE  43F9 00001635            389      LEA     G_MSG,      A1          ; G Message
000012B4  303C 000D                390      MOVE    #13,        D0          ; No Line feed
000012B8  4E4F                     391      TRAP    #15                     ; Trap (Perform action)
000012BA                           392      
000012BA                           393      ; Player Gravity
000012BA  103C 000B                394      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012BE  323C 0B07                395      MOVE.W  #$0B07,     D1          ; Col 12, Row 03
000012C2  4E4F                     396      TRAP    #15                     ; Trap (Perform action)
000012C4  103C 0003                397      MOVE.B  #03,        D0          ; Display number at D1.L
000012C8  2239 0000167A            398      MOVE.L  PLYR_GRAVITY,D1         ; Move Gravity to D1.L
000012CE  4E4F                     399      TRAP    #15                     ; Trap (Perform action)
000012D0                           400  
000012D0                           401      ; Show welcome msg 
000012D0  103C 000B                402      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012D4  323C 1801                403      MOVE.W  #$1801,     D1          ; Col 20, Row 1
000012D8  4E4F                     404      TRAP    #15                     ; Trap (Perform action)
000012DA  43F9 000015AF            405      LEA     WELCOME_MSG, A1         ; Keycode
000012E0  303C 000D                406      MOVE    #13,        D0          ; No Line feed
000012E4  4E4F                     407      TRAP    #15                     ; Trap (Perform action)
000012E6                           408      
000012E6                           409      
000012E6                           410      ; Show welcome msg 2
000012E6  103C 000B                411      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012EA  323C 1803                412      MOVE.W  #$1803,     D1          ; Col 10, Row 03
000012EE  4E4F                     413      TRAP    #15                     ; Trap (Perform action)
000012F0  43F9 000015CD            414      LEA     WELCOME_MSG2,    A1          ; On Ground Message
000012F6  303C 000D                415      MOVE    #13,        D0          ; No Line feed
000012FA  4E4F                     416      TRAP    #15                     ; Trap (Perform action)
000012FC                           417      
000012FC                           418    
000012FC                           419    
000012FC                           420  
000012FC                           421     ; Show welcome msg 2
000012FC  103C 000B                422      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001300  323C 1802                423      MOVE.W  #$1802,     D1          ; Col 10, Row 03
00001304  4E4F                     424      TRAP    #15                     ; Trap (Perform action)
00001306  43F9 000015E2            425      LEA     WELCOME_MSG3,    A1          ; On Ground Message
0000130C  303C 000D                426      MOVE    #13,        D0          ; No Line feed
00001310  4E4F                     427      TRAP    #15                     ; Trap (Perform action)
00001312                           428      
00001312                           429  
00001312                           430      ; Show welcome msg 4
00001312  103C 000B                431      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001316  323C 1804                432      MOVE.W  #$1804,     D1          ; Col 02, Row 06
0000131A  4E4F                     433      TRAP    #15                     ; Trap (Perform action)
0000131C  43F9 00001603            434      LEA     WELCOME_MSG4,   A1          ; Draw
00001322  303C 000D                435      MOVE    #13,        D0          ; No Line feed
00001326  4E4F                     436      TRAP    #15                     ; Trap (Perform action)
00001328                           437  
00001328                           438      ; Show how to quit game
00001328  103C 000B                439      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000132C  323C 0219                440      MOVE.W  #$0219,     D1          ; Col 02, Row 07
00001330  4E4F                     441      TRAP    #15                     ; Trap (Perform action)
00001332  43F9 0000163E            442      LEA     QUIT_MSG,   A1          ; Move Idle Message to A1
00001338  303C 000D                443      MOVE    #13,        D0          ; No Line feed
0000133C  4E4F                     444      TRAP    #15                
0000133E                           445  *-----------------------------------------------------------
0000133E                           446  * Subroutine    : Player is on Ground
0000133E                           447  * Description   : Check if the Player is on or off Ground
0000133E                           448  *-----------------------------------------------------------
0000133E                           449  IS_PLAYER_ON_GND:
0000133E                           450      ; Check if Player is on Ground
0000133E  4281                     451      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001340  4282                     452      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00001342  3239 00001664            453      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001348  82FC 0002                454      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000134C  2439 0000166E            455      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
00001352  B441                     456      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00001354  6C00 0008                457      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00001358  6D00 002C                458      BLT     SET_OFF_GROUND          ; The Player is off the Ground
0000135C  4E75                     459      RTS                             ; Return to subroutine
0000135E                           460  
0000135E                           461  
0000135E                           462  *-----------------------------------------------------------
0000135E                           463  * Subroutine    : On Ground
0000135E                           464  * Description   : Set the Player On Ground
0000135E                           465  *-----------------------------------------------------------
0000135E                           466  SET_ON_GROUND:
0000135E  4281                     467      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001360  3239 00001664            468      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001366  82FC 0002                469      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000136A  23C1 0000166E            470      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00001370  4281                     471      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001372  7200                     472      MOVE.L  #00,        D1          ; Player Velocity
00001374  23C1 00001676            473      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
0000137A  23FC 00000001 0000167E   474      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00001384  4E75                     475      RTS
00001386                           476  
00001386                           477  *-----------------------------------------------------------
00001386                           478  * Subroutine    : Off Ground
00001386                           479  * Description   : Set the Player Off Ground
00001386                           480  *-----------------------------------------------------------
00001386                           481  SET_OFF_GROUND:
00001386  23FC 00000000 0000167E   482      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
00001390  4E75                     483      RTS                             ; Return to subroutine
00001392                           484  *-----------------------------------------------------------
00001392                           485  * Subroutine    : Jump
00001392                           486  * Description   : Perform a Jump
00001392                           487  *-----------------------------------------------------------
00001392                           488  JUMP:
00001392  0CB9 00000001 0000167E   489      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000139C  6700 0006                490      BEQ     PERFORM_JUMP            ; Do Jump
000013A0  6000 000E                491      BRA     JUMP_DONE               ;
000013A4                           492  PERFORM_JUMP:
000013A4                           493                   ; Play jump sound
000013A4  23FC FFFFFFEC 00001676   494      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
000013AE  4E75                     495      RTS                             ; Return to subroutine
000013B0                           496  JUMP_DONE:
000013B0  4E75                     497      RTS                             ; Return to subroutine
000013B2                           498  
000013B2                           499  *-----------------------------------------------------------
000013B2                           500  * Subroutine    : Idle
000013B2                           501  * Description   : Perform a Idle
000013B2                           502  *----------------------------------------------------------- 
000013B2                           503  IDLE:
000013B2                           504                   ; Play Run Wav
000013B2  4E75                     505      RTS                             ; Return to subroutine
000013B4                           506  
000013B4                           507  *-----------------------------------------------------------
000013B4                           508  * Subroutine    : Draw Player
000013B4                           509  * Description   : Draw Player Square
000013B4                           510  *-----------------------------------------------------------
000013B4                           511  DRAW_PLAYER:
000013B4                           512      ; Set Pixel Colors
000013B4  223C 00FFA500            513      MOVE.L  #BLUE,     D1          ; Set Background color
000013BA  103C 0050                514      MOVE.B  #80,        D0          ; Task for Background Color
000013BE  4E4F                     515      TRAP    #15                     ; Trap (Perform action)
000013C0                           516  
000013C0                           517      ; Set X, Y, Width and Height
000013C0  2239 0000166A            518      MOVE.L  PLAYER_X,   D1          ; X
000013C6  2439 0000166E            519      MOVE.L  PLAYER_Y,   D2          ; Y
000013CC  2639 0000166A            520      MOVE.L  PLAYER_X,   D3
000013D2  5083                     521      ADD.L   #PLYR_W_INIT,   D3      ; Width
000013D4  2839 0000166E            522      MOVE.L  PLAYER_Y,   D4 
000013DA  5084                     523      ADD.L   #PLYR_H_INIT,   D4      ; Height
000013DC                           524      
000013DC                           525      ; Draw Player
000013DC  103C 0057                526      MOVE.B  #87,        D0          ; Draw Player
000013E0  4E4F                     527      TRAP    #15                     ; Trap (Perform action)
000013E2  4E75                     528      RTS                             ; Return to subroutine
000013E4                           529  
000013E4                           530  *-----------------------------------------------------------
000013E4                           531  * Subroutine    : Draw Enemy
000013E4                           532  * Description   : Draw Enemy Square
000013E4                           533  *-----------------------------------------------------------
000013E4                           534  DRAW_ENEMY:
000013E4                           535      ; Set Pixel Colors
000013E4  223C 000000FF            536      MOVE.L  #RED,       D1          ; Set Background color
000013EA  103C 0050                537      MOVE.B  #80,        D0          ; Task for Background Color
000013EE  4E4F                     538      TRAP    #15                     ; Trap (Perform action)
000013F0                           539  
000013F0                           540      ; Set X, Y, Width and Height
000013F0  2239 00001682            541      MOVE.L  ENEMY_X,    D1          ; X
000013F6  2439 00001686            542      MOVE.L  ENEMY_Y,    D2          ; Y
000013FC  2639 00001682            543      MOVE.L  ENEMY_X,    D3
00001402  5083                     544      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001404  2839 00001686            545      MOVE.L  ENEMY_Y,    D4 
0000140A  5084                     546      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000140C                           547      
0000140C                           548      ; Draw Enemy    
0000140C  103C 0057                549      MOVE.B  #87,        D0          ; Draw Enemy
00001410  4E4F                     550      TRAP    #15                     ; Trap (Perform action)
00001412  4E75                     551      RTS
00001414                           552  DRAW_ENEMY2:
00001414                           553      ; Set Pixel Colors for white enemy
00001414  223C 00FFFFFF            554      MOVE.L  #WHITE,      D1          ; Set Background color
0000141A  103C 0050                555      MOVE.B  #80,        D0          ; Task for Background Color
0000141E  4E4F                     556      TRAP    #15                     ; Trap (Perform action)
00001420                           557  
00001420                           558      ; Set X, Y, Width and Height for white enemy
00001420  2239 0000168A            559      MOVE.L  ENEMY_X2,    D1          ; X
00001426  2439 0000168E            560      MOVE.L  ENEMY_Y2,    D2          ; Y
0000142C  2639 0000168A            561      MOVE.L  ENEMY_X2,    D3
00001432  0683 0000000A            562      ADD.L   #ENMY2_W_INIT, D3        ; Width
00001438  0683 0000000A            563      ADD.L   #ENMY2_W_INIT, D3        ; Add width again for correct positioning
0000143E  2839 0000168E            564      MOVE.L  ENEMY_Y2,    D4 
00001444  5684                     565      ADD.L   #ENMY2_H_INIT/3, D4       ; Adjust Y coordinate for white enemy
00001446  0682 00000014            566      ADD.L   #20,D2                   ; Add extra offset to Y for spacing
0000144C                           567  
0000144C                           568      ; Draw white enemy    
0000144C  103C 0057                569      MOVE.B  #87,        D0          ; Draw Enemy
00001450  4E4F                     570      TRAP    #15                     ; Trap (Perform action)
00001452                           571  
00001452                           572      ; Set Pixel Colors for green enemy
00001452  223C 0000FF00            573      MOVE.L  #GREEN,       D1        ; Set Background color
00001458  103C 0050                574      MOVE.B  #80,        D0          ; Task for Background Color
0000145C  4E4F                     575      TRAP    #15                     ; Trap (Perform action)
0000145E                           576  
0000145E                           577      ; Set X, Y, Width and Height for green enemy
0000145E  2239 0000168A            578      MOVE.L  ENEMY_X2,    D1          ; X
00001464  0681 00000014            579      ADD.L   #20,D1                   ; Add extra offset to X for spacing
0000146A  2439 0000168E            580      MOVE.L  ENEMY_Y2,    D2          ; Y
00001470  2639 0000168A            581      MOVE.L  ENEMY_X2,    D3
00001476  0683 0000000A            582      ADD.L   #ENMY2_W_INIT, D3        ; Width
0000147C  5A83                     583      ADD.L   #ENMY2_W_INIT/2, D3      ; Half width for correct positioning
0000147E  2839 0000168E            584      MOVE.L  ENEMY_Y2,    D4          ; Y coordinate
00001484  0684 0000000A            585      ADD.L   #ENMY2_H_INIT, D4        ; Height
0000148A  0682 00000014            586      ADD.L   #20,D2                   ; Add extra offset to Y for spacing
00001490                           587  
00001490                           588      ; Draw green enemy    
00001490  103C 0057                589      MOVE.B  #87,        D0          ; Draw Enemy
00001494  4E4F                     590      TRAP    #15                     ; Trap (Perform action)
00001496                           591  
00001496  4E75                     592      RTS                             ; Return from subroutine
00001498                           593  *-----------------------------------------------------------
00001498                           594  * Subroutine    : Collision Check
00001498                           595  * Description   : Axis-Aligned Bounding Box Collision Detection
00001498                           596  * Algorithm checks for overlap on the 4 sides of the Player and 
00001498                           597  * Enemy rectangles
00001498                           598  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001498                           599  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001498                           600  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001498                           601  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001498                           602  *-----------------------------------------------------------
00001498                           603  CHECK_COLLISIONS:
00001498  4281                     604      CLR.L   D1                      ; Clear D1
0000149A  4282                     605      CLR.L   D2                      ; Clear D2
0000149C                           606  
0000149C                           607      ; Check collision for ENEMY1
0000149C  2239 0000166A            608      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000014A2  2439 00001682            609      MOVE.L  ENEMY_X,    D2          ; Move ENEMY1 X to D2
000014A8  D4B8 0008                610      ADD.L   ENMY_W_INIT,D2          ; Set ENEMY1 width (X + Width)
000014AC  B481                     611      CMP.L   D1,         D2          ; Do they overlap ?
000014AE  6F00 0006                612      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
000014B2  6000 0044                613      BRA     CHECK_ENEMY2_COLLISION  ; If not, check collision for ENEMY2
000014B6                           614  
000014B6                           615  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:
000014B6  D2B8 0008                616      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000014BA  2439 00001682            617      MOVE.L  ENEMY_X,    D2          ; Move ENEMY1 X to D2
000014C0  B481                     618      CMP.L   D1,         D2          ; Do they overlap ?
000014C2  6C00 0006                619      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal ?
000014C6  6000 0030                620      BRA     CHECK_ENEMY2_COLLISION  ; If not, check collision for ENEMY2
000014CA                           621  
000014CA                           622  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
000014CA  2239 0000166E            623      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000014D0  2439 00001686            624      MOVE.L  ENEMY_Y,    D2          ; Move ENEMY1 Y to D2
000014D6  D4B8 0008                625      ADD.L   ENMY_H_INIT,D2          ; Set ENEMY1 Height to D2
000014DA  B481                     626      CMP.L   D1,         D2          ; Do they overlap ?
000014DC  6F00 0006                627      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal ?
000014E0  6000 0016                628      BRA     CHECK_ENEMY2_COLLISION  ; If not, check collision for ENEMY2
000014E4                           629  
000014E4                           630  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     
000014E4  D2B8 0008                631      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000014E8  2439 00001686            632      MOVE.L  ENEMY_Y,    D2          ; Move ENEMY1 Height to D2  
000014EE  B481                     633      CMP.L   D1,         D2          ; Do they overlap ?
000014F0  6C00 0062                634      BGE     COLLISION_ENEMY1         ; Collision with ENEMY1!
000014F4  6000 0002                635      BRA     CHECK_ENEMY2_COLLISION  ; If not, check collision for ENEMY2
000014F8                           636  
000014F8                           637  CHECK_ENEMY2_COLLISION:
000014F8                           638      ; Check collision for ENEMY2
000014F8  2239 0000166A            639      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000014FE  2439 0000168A            640      MOVE.L  ENEMY_X2,   D2          ; Move ENEMY2 X to D2
00001504  D4B8 000A                641      ADD.L   ENMY2_W_INIT,D2         ; Set ENEMY2 width (X + Width)
00001508  B481                     642      CMP.L   D1,         D2          ; Do they overlap ?
0000150A  6F00 0006                643      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY2_X  ; Less than or Equal ?
0000150E  6000 0060                644      BRA     COLLISION_CHECK_DONE    ; If not, no collision for ENEMY2
00001512                           645  
00001512                           646  PLAYER_X_PLUS_W_LTE_TO_ENEMY2_X:
00001512  D2B8 0008                647      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001516  2439 0000168A            648      MOVE.L  ENEMY_X2,   D2          ; Move ENEMY2 X to D2
0000151C  B481                     649      CMP.L   D1,         D2          ; Do they overlap ?
0000151E  6C00 0006                650      BGE     PLAYER_Y_LTE_TO_ENEMY2_Y_PLUS_H  ; Less than or Equal ?
00001522  6000 004C                651      BRA     COLLISION_CHECK_DONE    ; If not, no collision for ENEMY2
00001526                           652  
00001526                           653  PLAYER_Y_LTE_TO_ENEMY2_Y_PLUS_H:     
00001526  2239 0000166E            654      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000152C  2439 0000168E            655      MOVE.L  ENEMY_Y2,   D2          ; Move ENEMY2 Y to D2
00001532  D4B8 000A                656      ADD.L   ENMY2_H_INIT,D2         ; Set ENEMY2 Height to D2
00001536  B481                     657      CMP.L   D1,         D2          ; Do they overlap ?
00001538  6F00 0006                658      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY2_Y  ; Less than or Equal ?
0000153C  6000 0032                659      BRA     COLLISION_CHECK_DONE    ; If not, no collision for ENEMY2
00001540                           660  
00001540                           661  PLAYER_Y_PLUS_H_LTE_TO_ENEMY2_Y:     
00001540  D2B8 0008                662      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001544  2439 0000168E            663      MOVE.L  ENEMY_Y2,   D2          ; Move ENEMY2 Height to D2  
0000154A  B481                     664      CMP.L   D1,         D2          ; Do they overlap ?
0000154C  6C00 0014                665      BGE     COLLISION_ENEMY2         ; Collision with ENEMY2!
00001550  6000 001E                666      BRA     COLLISION_CHECK_DONE    ; If not, no collision for ENEMY2
00001554                           667  
00001554                           668  COLLISION_ENEMY1:
00001554                           669      ; Collision with ENEMY1 detected
00001554  23FC 00000000 00001672   670      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
0000155E  6000 0022                671      BRA     END_GAME                ; End the game
00001562                           672  
00001562                           673  COLLISION_ENEMY2:
00001562                           674      ; Collision with ENEMY2 detected
00001562  23FC 00000000 00001672   675      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
0000156C  6000 0014                676      BRA     END_GAME                ; End the game
00001570                           677  
00001570                           678  COLLISION_CHECK_DONE:
00001570                           679      ; No Collision Update points
00001570  5281                     680      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001572  D2B9 00001672            681      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00001578  23C1 00001672            682      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
0000157E  4E75                     683      RTS                             ; End the game
00001580                           684  
00001580                           685  NO_COLLISION:
00001580  4E75                     686      RTS                             ; No collision, return
00001582                           687  
00001582                           688  END_GAME:
00001582  6000 0002                689      BRA     EXIT                    ; End the game
00001586                           690  *-----------------------------------------------------------
00001586                           691  * Subroutine    : EXIT
00001586                           692  * Description   : Exit message and End Game
00001586                           693  *-----------------------------------------------------------
00001586                           694  EXIT:
00001586                           695      ; Show if Exiting is Running
00001586  103C 000B                696      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000158A  323C 4004                697      MOVE.W  #$4004,     D1          ; Col 40, Row 1
0000158E  4E4F                     698      TRAP    #15                     ; Trap (Perform action)
00001590  43F9 00001656            699      LEA     EXIT_MSG,   A1          ; Exit
00001596  303C 000D                700      MOVE    #13,        D0          ; No Line feed
0000159A  4E4F                     701      TRAP    #15                     ; Trap (Perform action)
0000159C  103C 0009                702      MOVE.B  #TC_EXIT,   D0          ; Exit Code
000015A0  4E4F                     703      TRAP    #15                     ; Trap (Perform action)
000015A2  FFFF FFFF                704      SIMHALT
000015A6                           705  
000015A6                           706  
000015A6                           707  *-----------------------------------------------------------
000015A6                           708  * Section       : Messages
000015A6                           709  * Description   : Messages to Print on Console, names should be
000015A6                           710  * self documenting
000015A6                           711  *-----------------------------------------------------------
000015A6= 53 63 6F 72 65 20 ...    712  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
000015AF= 53 74 65 70 68 65 ...    713  WELCOME_MSG:    DC.B    'Stephen Foleys Endless runner', 0    ; New game title message (with newline)
000015CD= 48 6F 77 20 66 61 ...    714  WELCOME_MSG2:   DC.B    'How far can you get?', 0    ; How far can you get? message (with newline)
000015E2= 54 68 65 20 63 75 ...    715  WELCOME_MSG3:   DC.B    'The current high score is 999999', 0    ; High score message (with newline)
00001603= 20 20 20 20 20 20 ...    716  WELCOME_MSG4:   DC.B    '       GOOD LUCK !         '    , 0    ; Good luck message (with additional leading spaces)
0000161F                           717  
0000161F                           718  
0000161F                           719  
0000161F= 4A 75 6D 70 2E 2E ...    720  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00001628                           721  
00001628= 58 3A 00                 722  X_MSG           DC.B    'X:', 0             ; X Position Message
0000162B= 59 3A 00                 723  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
0000162E= 53 70 65 65 64 3A 00     724  V_MSG           DC.B    'Speed:', 0             ; Velocity Position Message
00001635= 47 72 61 76 69 74 ...    725  G_MSG           DC.B    'Gravity:', 0             ; Gravity Position Message
0000163E= 54 6F 20 51 75 69 ...    726  QUIT_MSG        DC.B    'To Quit press "ESC" Key', 0
00001656= 45 78 69 74 69 6E ...    727  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00001662                           728  
00001662                           729  *-----------------------------------------------------------
00001662                           730  * Section       : Graphic Colors
00001662                           731  * Description   : Screen Pixel Color
00001662                           732  *-----------------------------------------------------------
00001662  =000000FF                733  RED           EQU     $0000FF   ; Red color            
00001662  =00FFA500                734  BLUE          EQU     $FFA500   ; Bright blue color
00001662  =0000FF00                735  GREEN         EQU     $00FF00  ; Define green color
00001662  =00FFFFFF                736  WHITE         EQU     $FFFFFF  ; Define white color
00001662                           737  
00001662                           738  
00001662                           739  *-----------------------------------------------------------
00001662                           740  * Section       : Screen Size
00001662                           741  * Description   : Screen Width and Height
00001662                           742  *-----------------------------------------------------------
00001662                           743  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00001664                           744  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001666                           745  
00001666                           746  *-----------------------------------------------------------
00001666                           747  * Section       : Keyboard Input
00001666                           748  * Description   : Used for storing Keypresses
00001666                           749  *-----------------------------------------------------------
00001666                           750  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
0000166A                           751  
0000166A                           752  *-----------------------------------------------------------
0000166A                           753  * Section       : Character Positions
0000166A                           754  * Description   : Player and Enemy Position Memory Locations
0000166A                           755  *-----------------------------------------------------------
0000166A                           756  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
0000166E                           757  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001672                           758  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00001676                           759  
00001676                           760  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
0000167A                           761  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
0000167E                           762  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00001682                           763  
00001682                           764  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
00001686                           765  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Positionar
0000168A                           766  ENEMY_X2        DS.L    01  ; Reserve Space for Enemy 2 X Position
0000168E                           767  ENEMY_Y2        DS.L    01  ; Reserve Space for Enemy 2 Y Position
00001692                           768  
00001692                           769      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BLUE                FFA500
CHECK_COLLISIONS    1498
CHECK_ENEMY2_COLLISION  14F8
COLLISION_CHECK_DONE  1570
COLLISION_ENEMY1    1554
COLLISION_ENEMY2    1562
COLLISION_OCCURRED  1
CURRENT_KEY         1666
DELAY               10B8
DELAY_LOOP          10BE
DRAW                11D0
DRAW_ENEMY          13E4
DRAW_ENEMY2         1414
DRAW_PLAYER         13B4
DRAW_PLYR_DATA      11F2
END_GAME            1582
END_RESET_ENEMY     11CE
ENEMY_X             1682
ENEMY_X2            168A
ENEMY_Y             1686
ENEMY_Y2            168E
ENMY2_H_INIT        A
ENMY2_W_INIT        A
ENMY_H_INIT         8
ENMY_W_INIT         8
ESCAPE              1B
EXIT                1586
EXIT_MSG            1656
GAME                10C8
GAMELOOP            10C8
GND_FALSE           0
GND_TRUE            1
GREEN               FF00
G_MSG               1635
IDLE                13B2
INITIALISE          1000
INPUT               1100
IS_PLAYER_ON_GND    133E
JMP_INDEX           1
JUMP                1392
JUMP_DONE           13B0
JUMP_MSG            161F
MOVE_ENEMY          1172
MOVE_ENEMY2         118A
NO_COLLISION        1580
NO_RESET_ENEMY      11A4
NO_RESET_ENEMY2     11A6
OPPS_INDEX          2
PERFORM_JUMP        13A4
PLAYER_SCORE        1672
PLAYER_X            166A
PLAYER_X_PLUS_W_LTE_TO_ENEMY2_X  1512
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  14B6
PLAYER_Y            166E
PLAYER_Y_LTE_TO_ENEMY2_Y_PLUS_H  1526
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  14CA
PLAYER_Y_PLUS_H_LTE_TO_ENEMY2_Y  1540
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  14E4
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        167A
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         167E
PLYR_VELOCITY       1676
PLYR_W_INIT         8
POINTS              1
PROCESS_INPUT       111E
QUIT_MSG            163E
RED                 FF
RESET_ENEMY2_POSITION  11B8
RESET_ENEMY_POSITION  11A8
RESTART             10FE
RESTART_GAME        10F8
RESTART_KEY         72
RUN_INDEX           0
SCORE_MSG           15A6
SCREEN_H            1664
SCREEN_W            1662
SET_OFF_GROUND      1386
SET_ON_GROUND       135E
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              1146
V_MSG               162E
WELCOME_MSG         15AF
WELCOME_MSG2        15CD
WELCOME_MSG3        15E2
WELCOME_MSG4        1603
WHITE               FFFFFF
X_MSG               1628
Y_MSG               162B
