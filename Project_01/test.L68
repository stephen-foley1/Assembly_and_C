00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 29/02/2024 20:54:56

00001000                             1      ORG    $1000             ; Start address
00001000                             2  
00001000                             3  * Constants
00001000  =00000140                  4  SCREEN_WIDTH        EQU    320         ; Screen width
00001000  =000000C8                  5  SCREEN_HEIGHT       EQU    200         ; Screen height
00001000  =00000014                  6  PLAYER_WIDTH        EQU    20          ; Player width
00001000  =00000028                  7  PLAYER_HEIGHT       EQU    40          ; Player height
00001000  =00000014                  8  ENEMY_WIDTH         EQU    20          ; Enemy width
00001000  =00000014                  9  ENEMY_HEIGHT        EQU    20          ; Enemy height
00001000  =0000003C                 10  JUMP_HEIGHT         EQU    60          ; Jump height
00001000  =00000002                 11  GRAVITY             EQU    2           ; Gravity for player fall
00001000  =000000FF                 12  PLAYER_COLOR        EQU    $0000FF     ; Blue
00001000  =00FFA500                 13  ENEMY_COLOR         EQU    $FFA500     ; Orange
00001000  =00FFFFFF                 14  TEXT_COLOR          EQU    $FFFFFF     ; White
00001000  =00FFE135                 15  BACKGROUND_COLOR    EQU    $FFE135     ; Desert sand color
00001000                            16  
00001000                            17  * Memory addresses for player and enemy positions
00001000  =00002000                 18  PLAYER_X        EQU    $2000
00001000  =00002004                 19  PLAYER_Y        EQU    $2004
00001000  =00002008                 20  ENEMY_X         EQU    $2008
00001000  =0000200C                 21  ENEMY_Y         EQU    $200C
00001000                            22  
00001000                            23  * Memory addresses for player and enemy velocities
00001000  =00002010                 24  PLAYER_VY       EQU    $2010
00001000  =00002014                 25  ENEMY_VX        EQU    $2014
00001000                            26  
00001000                            27  * Keyboard status
00001000  =00FFE101                 28  KEY_STATUS      EQU    $FFE101
00001000                            29  
00001000                            30  * XBIOS function to read keyboard
00001000  =00FFD102                 31  READ_KEY        EQU    $FFD102
00001000                            32  
00001000                            33  START:  
00001000  2F3C 0000100E             34      MOVE.L #INIT, -(A7) ; Initialize stack pointer
00001006  2F0F                      35      MOVE.L A7, -(A7)    ; Copy stack pointer to A7
00001008  4EB9 00001082             36      JSR     MAIN   ; Jump to main program
0000100E                            37                     ; Halt simulator
0000100E                            38  
0000100E                            39  INIT:
0000100E                            40  INIT_PLAYER:
0000100E                            41      ; Your initialization code here
0000100E  4E75                      42      RTS
00001010                            43  
00001010                            44     
00001010  46FC 2700                 45      MOVE   #$2700, SR  ; Initialize supervisor mode and interrupts
00001014  203C 40000000             46      MOVE.L  #$40000000, D0 ; Initialize stack pointer
0000101A  2E40                      47      MOVE.L  D0, A7       ; Initialize stack pointer
0000101C  203C 00000032             48      MOVE.L  #PLAYER_START_X, D0 ; Initialize player X position
00001022  21C0 2000                 49      MOVE.L  D0, PLAYER_X ; Store player X position
00001026  203C 00000096             50      MOVE.L  #PLAYER_START_Y, D0 ; Initialize player Y position
0000102C  21C0 2004                 51      MOVE.L  D0, PLAYER_Y ; Store player Y position
00001030  203C 0000012C             52      MOVE.L  #ENEMY_START_X, D0 ; Initialize enemy X position
00001036  21C0 2008                 53      MOVE.L  D0, ENEMY_X   ; Store enemy X position
0000103A  203C 00000096             54      MOVE.L  #ENEMY_START_Y, D0 ; Initialize enemy Y position
00001040  21C0 200C                 55      MOVE.L  D0, ENEMY_Y   ; Store enemy Y position
00001044  7000                      56      MOVEQ   #0, D0        ; Initialize player velocity
00001046  21C0 2010                 57      MOVE.L  D0, PLAYER_VY ; Store player velocity
0000104A  7000                      58      MOVEQ   #0, D0        ; Initialize enemy velocity
0000104C  21C0 2014                 59      MOVE.L  D0, ENEMY_VX  ; Store enemy velocity
00001050  203C 000000FF             60      MOVE.L  #PLAYER_COLOR, D0 ; Load player color
00001056  21C0 00FF                 61      MOVE.L  D0, (PLAYER_COLOR) ; Store player color
0000105A  203C 00FFA500             62      MOVE.L  #ENEMY_COLOR, D0  ; Load enemy color
00001060  23C0 00FFA500             63      MOVE.L  D0, (ENEMY_COLOR) ; Store enemy color
00001066  203C 00FFE135             64      MOVE.L  #BACKGROUND_COLOR, D0 ; Load background color
0000106C  2200                      65      MOVE.L  D0, D1        ; Copy background color
0000106E  243C 00000140             66      MOVE.L  #SCREEN_WIDTH, D2  ; Load screen width
00001074  263C 000000C8             67      MOVE.L  #SCREEN_HEIGHT, D3 ; Load screen height
0000107A  4EB9 00001182             68      JSR     INIT_SCREEN  ; Initialize screen
00001080  4E75                      69      RTS                 ; Return from subroutine
00001082                            70  
00001082                            71  MAIN:   
00001082  4EB9 00001112             72      JSR     DRAW_BACKGROUND      ; Draw game background
00001088  4EB9 00001130             73      JSR     DRAW_PLAYER          ; Draw player
0000108E  4EB9 0000114A             74      JSR     DRAW_ENEMY           ; Draw enemy
00001094  7000                      75      MOVEQ   #0, D0               ; Initialize player score
00001096  2200                      76      MOVE.L  D0, D1               ; Copy score to D1
00001098  7003                      77      MOVEQ   #3, D0               ; Initialize player health
0000109A  2400                      78      MOVE.L  D0, D2               ; Copy health to D2
0000109C  263C 00FFFFFF             79      MOVE.L  #TEXT_COLOR, D3      ; Load text color
000010A2  2801                      80      MOVE.L  D1, D4               ; Copy score to D4
000010A4  2A02                      81      MOVE.L  D2, D5               ; Copy health to D5
000010A6  2C3C 00002010             82      MOVE.L  #PLAYER_VY, D6       ; Load player velocity
000010AC  2E06                      83      MOVE.L  D6, D7               ; Copy player velocity to D7
000010AE  2E3C 00002014             84      MOVE.L  #ENEMY_VX, D7        ; Load enemy velocity
000010B4  2C07                      85      MOVE.L  D7, D6               ; Copy enemy velocity to D6
000010B6                            86  
000010B6                            87  GAME_LOOP:
000010B6  2039 00FFE101             88      MOVE.L  KEY_STATUS, D0      ; Read keyboard status
000010BC  B03C 0001                 89      CMP.B   #1, D0               ; Check if key is pressed
000010C0  6700 001C                 90      BEQ     CHECK_KEY            ; If key pressed, check which key
000010C4                            91  
000010C4                            92      ; Move player and enemy
000010C4  4EB9 0000118A             93      JSR     MOVE_PLAYER
000010CA  4EB9 000011A8             94      JSR     MOVE_ENEMY
000010D0                            95  
000010D0                            96      ; Check for collisions
000010D0  4EB9 000011B8             97      JSR     COLLISION_DETECTION
000010D6                            98  
000010D6                            99      ; Display player info
000010D6  4EB9 000011CE            100      JSR     DISPLAY_INFO
000010DC                           101  
000010DC  60D8                     102      BRA     GAME_LOOP            ; Repeat game loop
000010DE                           103  
000010DE                           104  CHECK_KEY:
000010DE  103C 0001                105      MOVE.B  #1, D0               ; Read pressed key
000010E2  4E4E                     106      TRAP    #14                  ; Call XBIOS
000010E4  B03C 0020                107      CMP.B   #32, D0              ; Check for spacebar (jump)
000010E8  6700 0014                108      BEQ     PLAYER_JUMP
000010EC  B03C 0052                109      CMP.B   #82, D0              ; Check for 'r' key (restart)
000010F0  6700 0014                110      BEQ     RESTART_GAME
000010F4  B03C 001B                111      CMP.B   #27, D0              ; Check for escape key (exit)
000010F8  6700 0012                112      BEQ     EXIT_GAME
000010FC                           113  
000010FC  60B8                     114      BRA     GAME_LOOP            ; Continue game loop
000010FE                           115  
000010FE                           116  PLAYER_JUMP:
000010FE  703C                     117      MOVE.L  #JUMP_HEIGHT, D0    ; Load jump height
00001100  21C0 2010                118      MOVE.L  D0, (PLAYER_VY)      ; Set player velocity for jump
00001104  60B0                     119      BRA     GAME_LOOP
00001106                           120  
00001106                           121  RESTART_GAME:
00001106  4EB8 100E                122      JSR     INIT_PLAYER          ; Restart game
0000110A  60AA                     123      BRA     GAME_LOOP
0000110C                           124  
0000110C                           125  EXIT_GAME:
0000110C  4EB9 000011D4            126      JSR     EXIT                 ; Exit game
00001112                           127  
00001112                           128  DRAW_BACKGROUND:
00001112  203C 00FFE135            129      MOVE.L  #BACKGROUND_COLOR, D0 ; Load background color
00001118  7200                     130      MOVE.L  #0, D1               ; Set top left corner
0000111A  7400                     131      MOVE.L  #0, D2               ; Set top left corner
0000111C  263C 00000140            132      MOVE.L  #SCREEN_WIDTH, D3    ; Set width
00001122  283C 000000C8            133      MOVE.L  #SCREEN_HEIGHT, D4   ; Set height
00001128  4EB9 00001164            134      JSR     DRAW_RECTANGLE       ; Draw background rectangle
0000112E  4E75                     135      RTS
00001130                           136  
00001130                           137  DRAW_PLAYER:
00001130  203C 000000FF            138      MOVE.L  #PLAYER_COLOR, D0    ; Load player color
00001136  2238 2000                139      MOVE.L  PLAYER_X, D1         ; Load player X position
0000113A  2438 2004                140      MOVE.L  PLAYER_Y, D2         ; Load player Y position
0000113E  7614                     141      MOVE.L  #PLAYER_WIDTH, D3    ; Set player width
00001140  7828                     142      MOVE.L  #PLAYER_HEIGHT, D4   ; Set player height
00001142  4EB9 00001164            143      JSR     DRAW_RECTANGLE       ; Draw player rectangle
00001148  4E75                     144      RTS
0000114A                           145  
0000114A                           146  DRAW_ENEMY:
0000114A  203C 00FFA500            147      MOVE.L  #ENEMY_COLOR, D0     ; Load enemy color
00001150  2238 2008                148      MOVE.L  ENEMY_X, D1          ; Load enemy X position
00001154  2438 200C                149      MOVE.L  ENEMY_Y, D2          ; Load enemy Y position
00001158  7614                     150      MOVE.L  #ENEMY_WIDTH, D3     ; Set enemy width
0000115A  7814                     151      MOVE.L  #ENEMY_HEIGHT, D4    ; Set enemy height
0000115C  4EB9 00001164            152      JSR     DRAW_RECTANGLE       ; Draw enemy rectangle
00001162  4E75                     153      RTS
00001164                           154  
00001164                           155  DRAW_RECTANGLE:
00001164  2F00                     156      MOVE.L  D0, -(A7)            ; Save color
00001166  2F01                     157      MOVE.L  D1, -(A7)            ; Save X position
00001168  2F02                     158      MOVE.L  D2, -(A7)            ; Save Y position
0000116A  2F03                     159      MOVE.L  D3, -(A7)            ; Save width
0000116C  2F04                     160      MOVE.L  D4, -(A7)            ; Save height
0000116E                           161  
0000116E  7001                     162      MOVEQ   #1, D0               ; Graphics VDI mode
00001170  7201                     163      MOVEQ   #1, D1               ; Number of points (rectangle)
00001172  7400                     164      MOVE.L  #0, D2               ; Address of XY position
00001174  2603                     165      MOVE.L  D3, D3               ; Width
00001176  2804                     166      MOVE.L  D4, D4               ; Height
00001178  2A05                     167      MOVE.L  D5, D5               ; Color
0000117A                           168  
0000117A  4E4E                     169      TRAP    #14                  ; Call VDI to draw rectangle
0000117C                           170  
0000117C  4FEF 0014                171      LEA     20(A7), A7           ; Restore stack pointer
00001180  4E75                     172      RTS
00001182                           173  
00001182                           174  INIT_SCREEN:
00001182  303C 0003                175      MOVE.W  #3, D0               ; Set text VDI mode
00001186  4E4E                     176      TRAP    #14                  ; Call XBIOS
00001188  4E75                     177      RTS
0000118A                           178  
0000118A                           179  MOVE_PLAYER:
0000118A  2038 2004                180      MOVE.L  PLAYER_Y, D0         ; Load player Y position
0000118E  B0BC 00000096            181      CMP.L   #PLAYER_START_Y, D0  ; Check if player is on the ground
00001194  6700 0010                182      BEQ     NO_JUMP              ; If on the ground, skip jump
00001198  2038 2010                183      MOVE.L  PLAYER_VY, D0        ; Load player velocity
0000119C  5580                     184      SUBQ.L  #GRAVITY, D0         ; Apply gravity
0000119E  21C0 2010                185      MOVE.L  D0, PLAYER_VY        ; Store updated velocity
000011A2  D1B8 2004                186      ADD.L   D0, PLAYER_Y         ; Update player Y position
000011A6                           187  NO_JUMP:
000011A6  4E75                     188      RTS
000011A8                           189  
000011A8                           190  MOVE_ENEMY:
000011A8  2038 2008                191      MOVE.L  ENEMY_X, D0          ; Load enemy X position
000011AC  2238 2014                192      MOVE.L  ENEMY_VX, D1         ; Load enemy velocity
000011B0  D081                     193      ADD.L   D1, D0               ; Update enemy X position
000011B2  21C0 2008                194      MOVE.L  D0, ENEMY_X          ; Store updated position
000011B6  4E75                     195      RTS
000011B8                           196  
000011B8                           197  COLLISION_DETECTION:
000011B8  2038 2000                198      MOVE.L  PLAYER_X, D0         ; Load player X position
000011BC  2238 2008                199      MOVE.L  ENEMY_X, D1          ; Load enemy X position
000011C0  9081                     200      SUB.L   D1, D0               ; Calculate distance between player and enemy
000011C2  B0BC 00000014            201      CMP.L   #ENEMY_WIDTH, D0     ; Check if player and enemy collide
000011C8  6F00 0006                202      BLE     GAME_OVER            ; If collide, go to game over
000011CC  4E75                     203      RTS
000011CE                           204  
000011CE                           205  DISPLAY_INFO:
000011CE                           206      ; Display player score and health
000011CE                           207      ; Your display code here
000011CE  4E75                     208      RTS
000011D0                           209  
000011D0                           210  GAME_OVER:
000011D0                           211      ; Display game over message and prompt for restart or exit
000011D0                           212      ; Your game over code here
000011D0  6000 FEE4                213      BRA     GAME_LOOP
000011D4                           214  
000011D4                           215  EXIT:
000011D4  FFFF FFFF                216      SIMHALT                     ; Halt simulator
000011D8                           217  
000011D8                           218  * Initial positions
000011D8  =00000032                219  PLAYER_START_X  EQU    50
000011D8  =00000096                220  PLAYER_START_Y  EQU    150
000011D8  =0000012C                221  ENEMY_START_X   EQU    300
000011D8  =00000096                222  ENEMY_START_Y   EQU    150
000011D8                           223  
000011D8                           224      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BACKGROUND_COLOR    FFE135
CHECK_KEY           10DE
COLLISION_DETECTION  11B8
DISPLAY_INFO        11CE
DRAW_BACKGROUND     1112
DRAW_ENEMY          114A
DRAW_PLAYER         1130
DRAW_RECTANGLE      1164
ENEMY_COLOR         FFA500
ENEMY_HEIGHT        14
ENEMY_START_X       12C
ENEMY_START_Y       96
ENEMY_VX            2014
ENEMY_WIDTH         14
ENEMY_X             2008
ENEMY_Y             200C
EXIT                11D4
EXIT_GAME           110C
GAME_LOOP           10B6
GAME_OVER           11D0
GRAVITY             2
INIT                100E
INIT_PLAYER         100E
INIT_SCREEN         1182
JUMP_HEIGHT         3C
KEY_STATUS          FFE101
MAIN                1082
MOVE_ENEMY          11A8
MOVE_PLAYER         118A
NO_JUMP             11A6
PLAYER_COLOR        FF
PLAYER_HEIGHT       28
PLAYER_JUMP         10FE
PLAYER_START_X      32
PLAYER_START_Y      96
PLAYER_VY           2010
PLAYER_WIDTH        14
PLAYER_X            2000
PLAYER_Y            2004
READ_KEY            FFD102
RESTART_GAME        1106
SCREEN_HEIGHT       C8
SCREEN_WIDTH        140
START               1000
TEXT_COLOR          FFFFFF
